// Code generated by github.com/gobuffalo/packr. DO NOT EDIT.

package templates

import "github.com/gobuffalo/packr"

// You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	packr.PackJSONBytes("../../templates", ".github/ISSUE_TEMPLATE.md", "\"PCEtLQpUaGlzIGZvcm0gaXMgZm9yIGJ1ZyByZXBvcnRzIGFuZCBmZWF0dXJlIHJlcXVlc3RzIE9OTFkhICAKSWYgeW91J3JlIGxvb2tpbmcgZm9yIGhlbHAgY2hlY2sgb3V0IFtvdXIgc3VwcG9ydCBndWlkZWxpbmVzXSgvU1VQUE9SVC5tZCkKe3stIHdpdGggLlN1cHBvcnRMaW5rcy5Ucm91Ymxlc2hvb3RpbmcgLX19CiAge3stIHByaW50ZiAiIGFuZCB0aGUgW3Ryb3VibGVzaG9vdGluZyBndWlkZV0oJXMpLiIgLiAtfX0Ke3sgZWxzZSB9fQogIHt7LSBwcmludGYgIi4iIC19fQp7eyBlbmQgfX0KLS0+CioqSXMgdGhpcyBhIEJVRyBSRVBPUlQgb3IgRkVBVFVSRSBSRVFVRVNUPyoqOgpidWcgfCBmZWF0dXJlCgoqKldoYXQgaGFwcGVuZWQqKjoKCioqV2hhdCB5b3UgZXhwZWN0ZWQgdG8gaGFwcGVuKio6CgoqKkhvdyB0byByZXByb2R1Y2UgaXQgKGFzIG1pbmltYWxseSBhbmQgcHJlY2lzZWx5IGFzIHBvc3NpYmxlKSoqOgoKKipBbnl0aGluZyBlbHNlIHdlIG5lZWQgdG8ga25vdz8qKjoKCioqRW52aXJvbm1lbnQqKjoKe3sgcHJpbnRmICItICVzIHZlcnNpb246ICAiIC5Qcm9qZWN0Lk5hbWUgfX0Ke3sgd2l0aCAuSXNzdWVUZW1wbGF0ZS5RdWVzdGlvbnMgLX19Cnt7LSByYW5nZSAuIC19fQogIHt7IHByaW50ZiAiLSAlczogICIgLiB9fQp7eyBlbmQgLX19Cnt7IGVuZCAtfX0Ke3sgcHJpbnRmICItIE90aGVyczoiIH19Cg==\"")
	packr.PackJSONBytes("../../templates", ".github/PULL_REQUEST_TEMPLATE.md", "\"PCEtLQpUaGFua3MgZm9yIHNlbmRpbmcgYSBwdWxsIHJlcXVlc3QhICAKSWYgdGhpcyBpcyB5b3VyIGZpcnN0IHRpbWUsIHJlYWQgb3VyIFtjb250cmlidXRpbmcgZ3VpZGVsaW5lc10oL0NPTlRSSUJVVElORy5tZCkuCi0tPgoqKldoYXQgdGhpcyBQUiBkb2VzIC8gd2h5IHdlIG5lZWQgaXQqKjoKCjwhLS0KKipXaGljaCBpc3N1ZSB0aGlzIFBSIGZpeGVzKiogKihvcHRpb25hbCAtIHVuY29tbWVudCBhbmQgYWRkIGlzc3VlKSo6CmZpeGVzICMwCi0tPgoKKipTcGVjaWFsIG5vdGVzIGZvciB5b3VyIHJldmlld2VyKio6CgoqKlJlbGVhc2Ugbm90ZSoqOgo8IS0tCk9wdGlvbmFsIG9uZSBsaW5lIG5vdGUgZm9yIHRoaXMgc3BlY2lmaWMgY2hhbmdlLCB0aGF0IGNhbiBiZSB1c2VkIGluIGEgcmVsZWFzZS1ub3RlIG9yIGNoYW5nZWxvZy4KLS0+CmBgYHJlbGVhc2Utbm90ZQoKYGBgCg==\"")
	packr.PackJSONBytes("../../templates", ".gitlab/issue_templates/Bug.md", "\"PCEtLQpUaGlzIGZvcm0gaXMgZm9yIGJ1ZyByZXBvcnRzIGFuZCBmZWF0dXJlIHJlcXVlc3RzIE9OTFkhICAKSWYgeW91J3JlIGxvb2tpbmcgZm9yIGhlbHAgY2hlY2sgb3V0IFtvdXIgc3VwcG9ydCBndWlkZWxpbmVzXSgvU1VQUE9SVC5tZCkKe3stIHdpdGggLlN1cHBvcnRMaW5rcy5Ucm91Ymxlc2hvb3RpbmcgLX19CiAge3stIHByaW50ZiAiIGFuZCB0aGUgW3Ryb3VibGVzaG9vdGluZyBndWlkZV0oJXMpLiIgLiAtfX0Ke3sgZWxzZSB9fQogIHt7LSBwcmludGYgIi4iIC19fQp7eyBlbmQgfX0KLS0+CioqQnVnIHJlcG9ydCoqCgoqKldoYXQgaGFwcGVuZWQqKjoKCioqV2hhdCB5b3UgZXhwZWN0ZWQgdG8gaGFwcGVuKio6CgoqKkhvdyB0byByZXByb2R1Y2UgaXQgKGFzIG1pbmltYWxseSBhbmQgcHJlY2lzZWx5IGFzIHBvc3NpYmxlKSoqOgoKKipBbnl0aGluZyBlbHNlIHdlIG5lZWQgdG8ga25vdz8qKjoKCioqRW52aXJvbm1lbnQqKjoKe3sgcHJpbnRmICItICVzIHZlcnNpb246ICAiIC5Qcm9qZWN0Lk5hbWUgfX0Ke3sgd2l0aCAuSXNzdWVUZW1wbGF0ZS5RdWVzdGlvbnMgLX19Cnt7LSByYW5nZSAuIC19fQogIHt7IHByaW50ZiAiLSAlczogICIgLiB9fQp7eyBlbmQgLX19Cnt7IGVuZCAtfX0Ke3sgcHJpbnRmICItIE90aGVyczoiIH19Cg==\"")
	packr.PackJSONBytes("../../templates", ".gitlab/issue_templates/Feature.md", "\"PCEtLQpUaGlzIGZvcm0gaXMgZm9yIGZlYXR1cmUgcmVxdWVzdHMgT05MWSEgIApJZiB5b3UncmUgbG9va2luZyBmb3IgaGVscCBjaGVjayBvdXQgW291ciBzdXBwb3J0IGd1aWRlbGluZXNdKC9TVVBQT1JULm1kKQp7ey0gd2l0aCAuU3VwcG9ydExpbmtzLlRyb3VibGVzaG9vdGluZyAtfX0KICB7ey0gcHJpbnRmICIgYW5kIHRoZSBbdHJvdWJsZXNob290aW5nIGd1aWRlXSglcykuIiAuIC19fQp7eyBlbHNlIH19CiAge3stIHByaW50ZiAiLiIgLX19Cnt7IGVuZCB9fQotLT4KKipGZWF0dXJlIHJlcXVlc3QqKgoKKipXaGF0IHRoaXMgZmVhdHVyZSBkb2VzIC8gd2h5IHdlIG5lZWQgaXQqKjoKCioqV2hpY2ggaXNzdWUgdGhpcyBmZWF0dXJlIGZpeCAoaWYgYW55KSoqCgoqKkFueXRoaW5nIGVsc2Ugd2UgbmVlZCB0byBrbm93PyoqOgo=\"")
	packr.PackJSONBytes("../../templates", ".gitlab/merge_request_templates/Merge Request.md", "\"PCEtLQpUaGFua3MgZm9yIHNlbmRpbmcgYSBwdWxsIHJlcXVlc3QhICAKSWYgdGhpcyBpcyB5b3VyIGZpcnN0IHRpbWUsIHJlYWQgb3VyIFtjb250cmlidXRpbmcgZ3VpZGVsaW5lc10oL0NPTlRSSUJVVElORy5tZCkKLS0+CioqV2hhdCB0aGlzIFBSIGRvZXMgLyB3aHkgd2UgbmVlZCBpdCoqOgoKPCEtLQoqKldoaWNoIGlzc3VlIHRoaXMgUFIgZml4ZXMqKiAqKG9wdGlvbmFsIC0gdW5jb21tZW50IGFuZCBhZGQgaXNzdWUpKjoKZml4ZXMgIwotLT4KCioqU3BlY2lhbCBub3RlcyBmb3IgeW91ciByZXZpZXdlcioqOgoKKipSZWxlYXNlIG5vdGUqKjoKPCEtLQpPcHRpb25hbCBvbmUgbGluZSBub3RlIGZvciB0aGlzIHNwZWNpZmljIGNoYW5nZSwgdGhhdCBjYW4gYmUgdXNlZCBpbiBhIHJlbGVhc2Utbm90ZSBvciBjaGFuZ2Vsb2cuCi0tPgpgYGByZWxlYXNlLW5vdGUKCmBgYAo=\"")
	packr.PackJSONBytes("../../templates", "CHANGELOG.md", "\"PCEtLQojIHYwLjIuMApfMjAxN18KICAtIFtEb3dubG9hZHMgZm9yIHYwLjIuMF0oI2Rvd25sb2Fkcy1mb3ItdjAyMCkKICAtIFtDaGFuZ2Vsb2cgc2luY2UgdjAuMS4wXSgjY2hhbmdlcy1zaW5jZS12MDEwKQogIC0gW0RvY3VtZW50YXRpb24gZm9yIHYwLjIuMF0oI2RvY3VtZW50YXRpb24tZm9yLXYwMjApCgojIyBEb2N1bWVudGF0aW9uIGZvciB2MC4yLjAKW0RvY3VtZW50YXRpb25dKC90cmVlL3YwLjIuMC9kb2NzKQoKIyMgQ2hhbmdlcyBzaW5jZSB2MC4xLjAKCiMjIEZpeGVzIHNpbmNlIHYwLjEuMAoKLS0tCgotLT4KCiMgdjAuMS4wCl8yMDE3LTAxLTAxXwogIC0gW0Rvd25sb2FkcyBmb3IgdjAuMS4wXSgjZG93bmxvYWRzLWZvci12MDEwKQogIC0gW0NoYW5nZWxvZyBzaW5jZSB2MC4wLjBdKCNjaGFuZ2VzLXNpbmNlLXYwMDApCiAgLSBbRG9jdW1lbnRhdGlvbiBmb3IgdjAuMS4wXSgjZG9jdW1lbnRhdGlvbi1mb3ItdjAxMCkKCiMjIERvd25sb2FkcyBmb3IgdjAuMS4wCgpmaWxlIHwgc2hhMSBoYXNoIHwgbWQ1IGhhc2gKLS0tIHwgLS0tLS0tLS0tIHwgLS0tLS0tLS0KW2ZpbGUudGFyLmd6XShodHRwczovL2V4YW1wbGUuY29tL3JlbGVhc2UvdjAuMS4wL2ZpbGUudGFyLmd6KSB8IGAxNTc4MzA1ZWZjYjNlYjhjNzk2NGFkYzUzNWFkYjJlNGIxZmU0MWY2YCB8IGA5MmZjZmQwN2Q3NWFlOTRiZmNhMzZkZWQ3MjJhZTdiNjI2MDkxZmU0ZjdlNzZmNmZjYmY5ZjQ2YTJmZTNhYWI2YAoKIyMgRG9jdW1lbnRhdGlvbiBmb3IgdjAuMS4wCnt7IHdpdGggLlN1cHBvcnRMaW5rcy5Eb2N1bWVudGF0aW9uIH19W0RvY3VtZW50YXRpb25dKHt7IC4gfX0pe3sgZW5kIH19Cnt7IHdpdGggLlN1cHBvcnRMaW5rcy5FeGFtcGxlcyB9fVtFeGFtcGxlc10oe3sgLiB9fSl7eyBlbmQgfX0KCiMjIENoYW5nZXMgc2luY2UgdjAuMC4wCiAgLSBGZWF0dXJlIFgKICAtIEZlYXR1cmUgWgoKIyMgRml4ZXMgc2luY2UgdjAuMC4wCiAgLSBGaXggMTIzCg==\"")
	packr.PackJSONBytes("../../templates", "CLA/CORPORATE_CONTRIBUTOR_LICENSE_AGREEMENT.md", "\"IyBDb3Jwb3JhdGUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnQKCllvdSBhY2NlcHQgYW5kIGFncmVlIHRvIHRoZSBmb2xsb3dpbmcgdGVybXMgYW5kIGNvbmRpdGlvbnMgZm9yIFlvdXIgcHJlc2VudCBhbmQgZnV0dXJlIENvbnRyaWJ1dGlvbnMgc3VibWl0dGVkIHRvIHt7IC5DbGEuQ29weXJpZ2h0SG9sZGVyIH19LiBFeGNlcHQgZm9yIHRoZSBsaWNlbnNlIGdyYW50ZWQgaGVyZWluIHRvIHt7IC5DbGEuQ29weXJpZ2h0SG9sZGVyIH19IGFuZCByZWNpcGllbnRzIG9mIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIGJ5IHt7IC5DbGEuQ29weXJpZ2h0SG9sZGVyIH19LCBZb3UgcmVzZXJ2ZSBhbGwgcmlnaHQsIHRpdGxlLCBhbmQgaW50ZXJlc3QgaW4gYW5kIHRvIFlvdXIgQ29udHJpYnV0aW9ucy4KCjEuICBEZWZpbml0aW9ucy4KCgkiWW91IiAob3IgIllvdXIiKSBzaGFsbCBtZWFuIHRoZSBjb3B5cmlnaHQgb3duZXIgb3IgbGVnYWwgZW50aXR5IGF1dGhvcml6ZWQgYnkgdGhlIGNvcHlyaWdodCBvd25lciB0aGF0IGlzIG1ha2luZyB0aGlzIEFncmVlbWVudCB3aXRoIHt7IC5DbGEuQ29weXJpZ2h0SG9sZGVyIH19LiBGb3IgbGVnYWwgZW50aXRpZXMsIHRoZSBlbnRpdHkgbWFraW5nIGEgQ29udHJpYnV0aW9uIGFuZCBhbGwgb3RoZXIgZW50aXRpZXMgdGhhdCBjb250cm9sLCBhcmUgY29udHJvbGxlZCBieSwgb3IgYXJlIHVuZGVyIGNvbW1vbiBjb250cm9sIHdpdGggdGhhdCBlbnRpdHkgYXJlIGNvbnNpZGVyZWQgdG8gYmUgYSBzaW5nbGUgQ29udHJpYnV0b3IuIEZvciB0aGUgcHVycG9zZXMgb2YgdGhpcyBkZWZpbml0aW9uLCAiY29udHJvbCIgbWVhbnMgKGkpIHRoZSBwb3dlciwgZGlyZWN0IG9yIGluZGlyZWN0LCB0byBjYXVzZSB0aGUgZGlyZWN0aW9uIG9yIG1hbmFnZW1lbnQgb2Ygc3VjaCBlbnRpdHksIHdoZXRoZXIgYnkgY29udHJhY3Qgb3Igb3RoZXJ3aXNlLCBvciAoaWkpIG93bmVyc2hpcCBvZiBmaWZ0eSBwZXJjZW50ICg1MCUpIG9yIG1vcmUgb2YgdGhlIG91dHN0YW5kaW5nIHNoYXJlcywgb3IgKGlpaSkgYmVuZWZpY2lhbCBvd25lcnNoaXAgb2Ygc3VjaCBlbnRpdHkuCgoJIkNvbnRyaWJ1dGlvbiIgc2hhbGwgbWVhbiB0aGUgY29kZSwgZG9jdW1lbnRhdGlvbiBvciBvdGhlciBvcmlnaW5hbCB3b3JrcyBvZiBhdXRob3JzaGlwLCBpbmNsdWRpbmcgYW55IG1vZGlmaWNhdGlvbnMgb3IgYWRkaXRpb25zIHRvIGFuIGV4aXN0aW5nIHdvcmssIHRoYXQgaXMgc3VibWl0dGVkIGJ5IFlvdSB0byB7eyAuQ2xhLkNvcHlyaWdodEhvbGRlciB9fSBmb3IgaW5jbHVzaW9uIGluLCBvciBkb2N1bWVudGF0aW9uIG9mLCBhbnkgb2YgdGhlIHByb2R1Y3RzIG93bmVkIG9yIG1hbmFnZWQgYnkge3sgLkNsYS5Db3B5cmlnaHRIb2xkZXIgfX0gKHRoZSAiV29yayIpLiBGb3IgdGhlIHB1cnBvc2VzIG9mIHRoaXMgZGVmaW5pdGlvbiwgInN1Ym1pdHRlZCIgbWVhbnMgYW55IGZvcm0gb2YgZWxlY3Ryb25pYywgdmVyYmFsLCBvciB3cml0dGVuIGNvbW11bmljYXRpb24gc2VudCB0byB7eyAuQ2xhLkNvcHlyaWdodEhvbGRlciB9fSBvciBpdHMgcmVwcmVzZW50YXRpdmVzLCBpbmNsdWRpbmcgYnV0IG5vdCBsaW1pdGVkIHRvIGNvbW11bmljYXRpb24gb24gZWxlY3Ryb25pYyBtYWlsaW5nIGxpc3RzLCBzb3VyY2UgY29kZSBjb250cm9sIHN5c3RlbXMsIGFuZCBpc3N1ZSB0cmFja2luZyBzeXN0ZW1zIHRoYXQgYXJlIG1hbmFnZWQgYnksIG9yIG9uIGJlaGFsZiBvZiwge3sgLkNsYS5Db3B5cmlnaHRIb2xkZXIgfX0gZm9yIHRoZSBwdXJwb3NlIG9mIGRpc2N1c3NpbmcgYW5kIGltcHJvdmluZyB0aGUgV29yaywgYnV0IGV4Y2x1ZGluZyBjb21tdW5pY2F0aW9uIHRoYXQgaXMgY29uc3BpY3VvdXNseSBtYXJrZWQgb3Igb3RoZXJ3aXNlIGRlc2lnbmF0ZWQgaW4gd3JpdGluZyBieSBZb3UgYXMgIk5vdCBhIENvbnRyaWJ1dGlvbi4iCgoyLiAgR3JhbnQgb2YgQ29weXJpZ2h0IExpY2Vuc2UuCgpTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB0aGlzIEFncmVlbWVudCwgWW91IGhlcmVieSBncmFudCB0byB7eyAuQ2xhLkNvcHlyaWdodEhvbGRlciB9fSBhbmQgdG8gcmVjaXBpZW50cyBvZiBzb2Z0d2FyZSBkaXN0cmlidXRlZCBieSB7eyAuQ2xhLkNvcHlyaWdodEhvbGRlciB9fSBhIHBlcnBldHVhbCwgd29ybGR3aWRlLCBub24tZXhjbHVzaXZlLCBuby1jaGFyZ2UsIHJveWFsdHktZnJlZSwgaXJyZXZvY2FibGUgY29weXJpZ2h0IGxpY2Vuc2UgdG8gcmVwcm9kdWNlLCBwcmVwYXJlIGRlcml2YXRpdmUgd29ya3Mgb2YsIHB1YmxpY2x5IGRpc3BsYXksIHB1YmxpY2x5IHBlcmZvcm0sIHN1YmxpY2Vuc2UsIGFuZCBkaXN0cmlidXRlIFlvdXIgQ29udHJpYnV0aW9ucyBhbmQgc3VjaCBkZXJpdmF0aXZlIHdvcmtzLgoKMy4gIEdyYW50IG9mIFBhdGVudCBMaWNlbnNlLgoKU3ViamVjdCB0byB0aGUgdGVybXMgYW5kIGNvbmRpdGlvbnMgb2YgdGhpcyBBZ3JlZW1lbnQsIFlvdSBoZXJlYnkgZ3JhbnQgdG8ge3sgLkNsYS5Db3B5cmlnaHRIb2xkZXIgfX0gYW5kIHRvIHJlY2lwaWVudHMgb2Ygc29mdHdhcmUgZGlzdHJpYnV0ZWQgYnkge3sgLkNsYS5Db3B5cmlnaHRIb2xkZXIgfX0gYSBwZXJwZXR1YWwsIHdvcmxkd2lkZSwgbm9uLWV4Y2x1c2l2ZSwgbm8tY2hhcmdlLCByb3lhbHR5LWZyZWUsIGlycmV2b2NhYmxlIChleGNlcHQgYXMgc3RhdGVkIGluIHRoaXMgc2VjdGlvbikgcGF0ZW50IGxpY2Vuc2UgdG8gbWFrZSwgaGF2ZSBtYWRlLCB1c2UsIG9mZmVyIHRvIHNlbGwsIHNlbGwsIGltcG9ydCwgYW5kIG90aGVyd2lzZSB0cmFuc2ZlciB0aGUgV29yaywgd2hlcmUgc3VjaCBsaWNlbnNlIGFwcGxpZXMgb25seSB0byB0aG9zZSBwYXRlbnQgY2xhaW1zIGxpY2Vuc2FibGUgYnkgWW91IHRoYXQgYXJlIG5lY2Vzc2FyaWx5IGluZnJpbmdlZCBieSBZb3VyIENvbnRyaWJ1dGlvbihzKSBhbG9uZSBvciBieSBjb21iaW5hdGlvbiBvZiBZb3VyIENvbnRyaWJ1dGlvbihzKSB3aXRoIHRoZSBXb3JrIHRvIHdoaWNoIHN1Y2ggQ29udHJpYnV0aW9uKHMpIHdhcyBzdWJtaXR0ZWQuIElmIGFueSBlbnRpdHkgaW5zdGl0dXRlcyBwYXRlbnQgbGl0aWdhdGlvbiBhZ2FpbnN0IFlvdSBvciBhbnkgb3RoZXIgZW50aXR5IChpbmNsdWRpbmcgYSBjcm9zcy1jbGFpbSBvciBjb3VudGVyY2xhaW0gaW4gYSBsYXdzdWl0KSBhbGxlZ2luZyB0aGF0IHlvdXIgQ29udHJpYnV0aW9uLCBvciB0aGUgV29yayB0byB3aGljaCB5b3UgaGF2ZSBjb250cmlidXRlZCwgY29uc3RpdHV0ZXMgZGlyZWN0IG9yIGNvbnRyaWJ1dG9yeSBwYXRlbnQgaW5mcmluZ2VtZW50LCB0aGVuIGFueSBwYXRlbnQgbGljZW5zZXMgZ3JhbnRlZCB0byB0aGF0IGVudGl0eSB1bmRlciB0aGlzIEFncmVlbWVudCBmb3IgdGhhdCBDb250cmlidXRpb24gb3IgV29yayBzaGFsbCB0ZXJtaW5hdGUgYXMgb2YgdGhlIGRhdGUgc3VjaCBsaXRpZ2F0aW9uIGlzIGZpbGVkLgoKNC4gIFlvdSByZXByZXNlbnQgdGhhdCBZb3UgYXJlIGxlZ2FsbHkgZW50aXRsZWQgdG8gZ3JhbnQgdGhlIGFib3ZlIGxpY2Vuc2UuIFlvdSByZXByZXNlbnQgZnVydGhlciB0aGF0IGVhY2ggb2YgWW91ciBlbXBsb3llZXMgaXMgYXV0aG9yaXplZCB0byBzdWJtaXQgQ29udHJpYnV0aW9ucyBvbiBZb3VyIGJlaGFsZiwgYnV0IGV4Y2x1ZGluZyBlbXBsb3llZXMgdGhhdCBhcmUgZGVzaWduYXRlZCBpbiB3cml0aW5nIGJ5IFlvdSBhcyAiTm90IGF1dGhvcml6ZWQgdG8gc3VibWl0IENvbnRyaWJ1dGlvbnMgb24gYmVoYWxmIG9mIFtuYW1lIG9mIFlvdXIgY29ycG9yYXRpb24gaGVyZV0uIiBTdWNoIGRlc2lnbmF0aW9ucyBvZiBleGNsdXNpb24gZm9yIHVuYXV0aG9yaXplZCBlbXBsb3llZXMgYXJlIHRvIGJlIHN1Ym1pdHRlZCB2aWEgZW1haWwgdG8ge3sgLkNsYS5NYWlsIH19LgoKNS4gIFlvdSByZXByZXNlbnQgdGhhdCBlYWNoIG9mIFlvdXIgQ29udHJpYnV0aW9ucyBpcyBZb3VyIG9yaWdpbmFsIGNyZWF0aW9uIChzZWUgc2VjdGlvbiA3IGZvciBzdWJtaXNzaW9ucyBvbiBiZWhhbGYgb2Ygb3RoZXJzKS4KCjYuICBZb3UgYXJlIG5vdCBleHBlY3RlZCB0byBwcm92aWRlIHN1cHBvcnQgZm9yIFlvdXIgQ29udHJpYnV0aW9ucywgZXhjZXB0IHRvIHRoZSBleHRlbnQgWW91IGRlc2lyZSB0byBwcm92aWRlIHN1cHBvcnQuIFlvdSBtYXkgcHJvdmlkZSBzdXBwb3J0IGZvciBmcmVlLCBmb3IgYSBmZWUsIG9yIG5vdCBhdCBhbGwuIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgWW91IHByb3ZpZGUgWW91ciBDb250cmlidXRpb25zIG9uIGFuICJBUyBJUyIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLCBpbmNsdWRpbmcsIHdpdGhvdXQgbGltaXRhdGlvbiwgYW55IHdhcnJhbnRpZXMgb3IgY29uZGl0aW9ucyBvZiBUSVRMRSwgTk9OLUlORlJJTkdFTUVOVCwgTUVSQ0hBTlRBQklMSVRZLCBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4KCjcuICBTaG91bGQgWW91IHdpc2ggdG8gc3VibWl0IHdvcmsgdGhhdCBpcyBub3QgWW91ciBvcmlnaW5hbCBjcmVhdGlvbiwgWW91IG1heSBzdWJtaXQgaXQgdG8ge3sgLkNsYS5Db3B5cmlnaHRIb2xkZXIgfX0gc2VwYXJhdGVseSBmcm9tIGFueSBDb250cmlidXRpb24sIGlkZW50aWZ5aW5nIHRoZSBjb21wbGV0ZSBkZXRhaWxzIG9mIGl0cyBzb3VyY2UgYW5kIG9mIGFueSBsaWNlbnNlIG9yIG90aGVyIHJlc3RyaWN0aW9uIChpbmNsdWRpbmcsIGJ1dCBub3QgbGltaXRlZCB0bywgcmVsYXRlZCBwYXRlbnRzLCB0cmFkZW1hcmtzLCBhbmQgbGljZW5zZSBhZ3JlZW1lbnRzKSBvZiB3aGljaCB5b3UgYXJlIHBlcnNvbmFsbHkgYXdhcmUsIGFuZCBjb25zcGljdW91c2x5IG1hcmtpbmcgdGhlIHdvcmsgYXMgIlN1Ym1pdHRlZCBvbiBiZWhhbGYgb2YgYSB0aGlyZC1wYXJ0eTogW25hbWVkIGhlcmVdIi4KCjguICBJdCBpcyBZb3VyIHJlc3BvbnNpYmlsaXR5IHRvIG5vdGlmeSB7eyAuQ2xhLkNvcHlyaWdodEhvbGRlciB9fSB3aGVuIGFueSBjaGFuZ2UgaXMgcmVxdWlyZWQgdG8gdGhlIGxpc3Qgb2YgZGVzaWduYXRlZCBlbXBsb3llZXMgZXhjbHVkZWQgZnJvbSBzdWJtaXR0aW5nIENvbnRyaWJ1dGlvbnMgb24gWW91ciBiZWhhbGYgcGVyIFNlY3Rpb24gNC4gU3VjaCBub3RpZmljYXRpb24gc2hvdWxkIGJlIHNlbnQgdmlhIGVtYWlsIHRvIHt7IC5DbGEuTWFpbCB9fS4KClRoaXMgdGV4dCBpcyBsaWNlbnNlZCB1bmRlciB0aGUgW0NyZWF0aXZlIENvbW1vbnMgQXR0cmlidXRpb24gMy4wIExpY2Vuc2VdKGh0dHBzOi8vY3JlYXRpdmVjb21tb25zLm9yZy9saWNlbnNlcy9ieS8zLjAvKSBhbmQgdGhlIG9yaWdpbmFsIHNvdXJjZSBpcyB0aGUgR29vZ2xlIE9wZW4gU291cmNlIFByb2dyYW1zIE9mZmljZS4K\"")
	packr.PackJSONBytes("../../templates", "CLA/INDIVIDUAL_CONTRIBUTOR_LICENSE_AGREEMENT.md", "\"IyBJbmRpdmlkdWFsIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50CgpZb3UgYWNjZXB0IGFuZCBhZ3JlZSB0byB0aGUgZm9sbG93aW5nIHRlcm1zIGFuZCBjb25kaXRpb25zIGZvciBZb3VyIHByZXNlbnQgYW5kIGZ1dHVyZSBDb250cmlidXRpb25zIHN1Ym1pdHRlZCB0byB7eyAuQ2xhLkNvcHlyaWdodEhvbGRlciB9fSBFeGNlcHQgZm9yIHRoZSBsaWNlbnNlIGdyYW50ZWQgaGVyZWluIHRvIHt7IC5DbGEuQ29weXJpZ2h0SG9sZGVyIH19IGFuZCByZWNpcGllbnRzIG9mIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIGJ5IHt7IC5DbGEuQ29weXJpZ2h0SG9sZGVyIH19LCBZb3UgcmVzZXJ2ZSBhbGwgcmlnaHQsIHRpdGxlLCBhbmQgaW50ZXJlc3QgaW4gYW5kIHRvIFlvdXIgQ29udHJpYnV0aW9ucy4KCjEuICBEZWZpbml0aW9ucy4KCgkiWW91IiAob3IgIllvdXIiKSBzaGFsbCBtZWFuIHRoZSBjb3B5cmlnaHQgb3duZXIgb3IgbGVnYWwgZW50aXR5IGF1dGhvcml6ZWQgYnkgdGhlIGNvcHlyaWdodCBvd25lciB0aGF0IGlzIG1ha2luZyB0aGlzIEFncmVlbWVudCB3aXRoIHt7IC5DbGEuQ29weXJpZ2h0SG9sZGVyIH19LiBGb3IgbGVnYWwgZW50aXRpZXMsIHRoZSBlbnRpdHkgbWFraW5nIGEgQ29udHJpYnV0aW9uIGFuZCBhbGwgb3RoZXIgZW50aXRpZXMgdGhhdCBjb250cm9sLCBhcmUgY29udHJvbGxlZCBieSwgb3IgYXJlIHVuZGVyIGNvbW1vbiBjb250cm9sIHdpdGggdGhhdCBlbnRpdHkgYXJlIGNvbnNpZGVyZWQgdG8gYmUgYSBzaW5nbGUgQ29udHJpYnV0b3IuIEZvciB0aGUgcHVycG9zZXMgb2YgdGhpcyBkZWZpbml0aW9uLCAiY29udHJvbCIgbWVhbnMgKGkpIHRoZSBwb3dlciwgZGlyZWN0IG9yIGluZGlyZWN0LCB0byBjYXVzZSB0aGUgZGlyZWN0aW9uIG9yIG1hbmFnZW1lbnQgb2Ygc3VjaCBlbnRpdHksIHdoZXRoZXIgYnkgY29udHJhY3Qgb3Igb3RoZXJ3aXNlLCBvciAoaWkpIG93bmVyc2hpcCBvZiBmaWZ0eSBwZXJjZW50ICg1MCUpIG9yIG1vcmUgb2YgdGhlIG91dHN0YW5kaW5nIHNoYXJlcywgb3IgKGlpaSkgYmVuZWZpY2lhbCBvd25lcnNoaXAgb2Ygc3VjaCBlbnRpdHkuCgoJIkNvbnRyaWJ1dGlvbiIgc2hhbGwgbWVhbiBhbnkgb3JpZ2luYWwgd29yayBvZiBhdXRob3JzaGlwLCBpbmNsdWRpbmcgYW55IG1vZGlmaWNhdGlvbnMgb3IgYWRkaXRpb25zIHRvIGFuIGV4aXN0aW5nIHdvcmssIHRoYXQgaXMgaW50ZW50aW9uYWxseSBzdWJtaXR0ZWQgYnkgWW91IHRvIHt7IC5DbGEuQ29weXJpZ2h0SG9sZGVyIH19IGZvciBpbmNsdXNpb24gaW4sIG9yIGRvY3VtZW50YXRpb24gb2YsIGFueSBvZiB0aGUgcHJvZHVjdHMgb3duZWQgb3IgbWFuYWdlZCBieSB7eyAuQ2xhLkNvcHlyaWdodEhvbGRlciB9fSAodGhlICJXb3JrIikuIEZvciB0aGUgcHVycG9zZXMgb2YgdGhpcyBkZWZpbml0aW9uLCAic3VibWl0dGVkIiBtZWFucyBhbnkgZm9ybSBvZiBlbGVjdHJvbmljLCB2ZXJiYWwsIG9yIHdyaXR0ZW4gY29tbXVuaWNhdGlvbiBzZW50IHRvIHt7IC5DbGEuQ29weXJpZ2h0SG9sZGVyIH19IG9yIGl0cyByZXByZXNlbnRhdGl2ZXMsIGluY2x1ZGluZyBidXQgbm90IGxpbWl0ZWQgdG8gY29tbXVuaWNhdGlvbiBvbiBlbGVjdHJvbmljIG1haWxpbmcgbGlzdHMsIHNvdXJjZSBjb2RlIGNvbnRyb2wgc3lzdGVtcywgYW5kIGlzc3VlIHRyYWNraW5nIHN5c3RlbXMgdGhhdCBhcmUgbWFuYWdlZCBieSwgb3Igb24gYmVoYWxmIG9mLCB7eyAuQ2xhLkNvcHlyaWdodEhvbGRlciB9fSBmb3IgdGhlIHB1cnBvc2Ugb2YgZGlzY3Vzc2luZyBhbmQgaW1wcm92aW5nIHRoZSBXb3JrLCBidXQgZXhjbHVkaW5nIGNvbW11bmljYXRpb24gdGhhdCBpcyBjb25zcGljdW91c2x5IG1hcmtlZCBvciBvdGhlcndpc2UgZGVzaWduYXRlZCBpbiB3cml0aW5nIGJ5IFlvdSBhcyAiTm90IGEgQ29udHJpYnV0aW9uLiIKCjIuICBHcmFudCBvZiBDb3B5cmlnaHQgTGljZW5zZS4gU3ViamVjdCB0byB0aGUgdGVybXMgYW5kIGNvbmRpdGlvbnMgb2YgdGhpcyBBZ3JlZW1lbnQsIFlvdSBoZXJlYnkgZ3JhbnQgdG8ge3sgLkNsYS5Db3B5cmlnaHRIb2xkZXIgfX0gYW5kIHRvIHJlY2lwaWVudHMgb2Ygc29mdHdhcmUgZGlzdHJpYnV0ZWQgYnkge3sgLkNsYS5Db3B5cmlnaHRIb2xkZXIgfX0gYSBwZXJwZXR1YWwsIHdvcmxkd2lkZSwgbm9uLWV4Y2x1c2l2ZSwgbm8tY2hhcmdlLCByb3lhbHR5LWZyZWUsIGlycmV2b2NhYmxlIGNvcHlyaWdodCBsaWNlbnNlIHRvIHJlcHJvZHVjZSwgcHJlcGFyZSBkZXJpdmF0aXZlIHdvcmtzIG9mLCBwdWJsaWNseSBkaXNwbGF5LCBwdWJsaWNseSBwZXJmb3JtLCBzdWJsaWNlbnNlLCBhbmQgZGlzdHJpYnV0ZSBZb3VyIENvbnRyaWJ1dGlvbnMgYW5kIHN1Y2ggZGVyaXZhdGl2ZSB3b3Jrcy4KCjMuICBHcmFudCBvZiBQYXRlbnQgTGljZW5zZS4gU3ViamVjdCB0byB0aGUgdGVybXMgYW5kIGNvbmRpdGlvbnMgb2YgdGhpcyBBZ3JlZW1lbnQsIFlvdSBoZXJlYnkgZ3JhbnQgdG8ge3sgLkNsYS5Db3B5cmlnaHRIb2xkZXIgfX0gYW5kIHRvIHJlY2lwaWVudHMgb2Ygc29mdHdhcmUgZGlzdHJpYnV0ZWQgYnkge3sgLkNsYS5Db3B5cmlnaHRIb2xkZXIgfX0gYSBwZXJwZXR1YWwsIHdvcmxkd2lkZSwgbm9uLWV4Y2x1c2l2ZSwgbm8tY2hhcmdlLCByb3lhbHR5LWZyZWUsIGlycmV2b2NhYmxlIChleGNlcHQgYXMgc3RhdGVkIGluIHRoaXMgc2VjdGlvbikgcGF0ZW50IGxpY2Vuc2UgdG8gbWFrZSwgaGF2ZSBtYWRlLCB1c2UsIG9mZmVyIHRvIHNlbGwsIHNlbGwsIGltcG9ydCwgYW5kIG90aGVyd2lzZSB0cmFuc2ZlciB0aGUgV29yaywgd2hlcmUgc3VjaCBsaWNlbnNlIGFwcGxpZXMgb25seSB0byB0aG9zZSBwYXRlbnQgY2xhaW1zIGxpY2Vuc2FibGUgYnkgWW91IHRoYXQgYXJlIG5lY2Vzc2FyaWx5IGluZnJpbmdlZCBieSBZb3VyIENvbnRyaWJ1dGlvbihzKSBhbG9uZSBvciBieSBjb21iaW5hdGlvbiBvZiBZb3VyIENvbnRyaWJ1dGlvbihzKSB3aXRoIHRoZSBXb3JrIHRvIHdoaWNoIHN1Y2ggQ29udHJpYnV0aW9uKHMpIHdhcyBzdWJtaXR0ZWQuIElmIGFueSBlbnRpdHkgaW5zdGl0dXRlcyBwYXRlbnQgbGl0aWdhdGlvbiBhZ2FpbnN0IFlvdSBvciBhbnkgb3RoZXIgZW50aXR5IChpbmNsdWRpbmcgYSBjcm9zcy1jbGFpbSBvciBjb3VudGVyY2xhaW0gaW4gYSBsYXdzdWl0KSBhbGxlZ2luZyB0aGF0IHlvdXIgQ29udHJpYnV0aW9uLCBvciB0aGUgV29yayB0byB3aGljaCB5b3UgaGF2ZSBjb250cmlidXRlZCwgY29uc3RpdHV0ZXMgZGlyZWN0IG9yIGNvbnRyaWJ1dG9yeSBwYXRlbnQgaW5mcmluZ2VtZW50LCB0aGVuIGFueSBwYXRlbnQgbGljZW5zZXMgZ3JhbnRlZCB0byB0aGF0IGVudGl0eSB1bmRlciB0aGlzIEFncmVlbWVudCBmb3IgdGhhdCBDb250cmlidXRpb24gb3IgV29yayBzaGFsbCB0ZXJtaW5hdGUgYXMgb2YgdGhlIGRhdGUgc3VjaCBsaXRpZ2F0aW9uIGlzIGZpbGVkLgoKNC4gIFlvdSByZXByZXNlbnQgdGhhdCB5b3UgYXJlIGxlZ2FsbHkgZW50aXRsZWQgdG8gZ3JhbnQgdGhlIGFib3ZlIGxpY2Vuc2UuIElmIHlvdXIgZW1wbG95ZXIocykgaGFzIHJpZ2h0cyB0byBpbnRlbGxlY3R1YWwgcHJvcGVydHkgdGhhdCB5b3UgY3JlYXRlIHRoYXQgaW5jbHVkZXMgeW91ciBDb250cmlidXRpb25zLCB5b3UgcmVwcmVzZW50IHRoYXQgeW91IGhhdmUgcmVjZWl2ZWQgcGVybWlzc2lvbiB0byBtYWtlIENvbnRyaWJ1dGlvbnMgb24gYmVoYWxmIG9mIHRoYXQgZW1wbG95ZXIsIHRoYXQgeW91ciBlbXBsb3llciBoYXMgd2FpdmVkIHN1Y2ggcmlnaHRzIGZvciB5b3VyIENvbnRyaWJ1dGlvbnMgdG8ge3sgLkNsYS5Db3B5cmlnaHRIb2xkZXIgfX0sIG9yIHRoYXQgeW91ciBlbXBsb3llciBoYXMgZXhlY3V0ZWQgYSBzZXBhcmF0ZSBDb3Jwb3JhdGUgQ0xBIHdpdGgge3sgLkNsYS5Db3B5cmlnaHRIb2xkZXIgfX0uCgo1LiAgWW91IHJlcHJlc2VudCB0aGF0IGVhY2ggb2YgWW91ciBDb250cmlidXRpb25zIGlzIFlvdXIgb3JpZ2luYWwgY3JlYXRpb24gKHNlZSBzZWN0aW9uIDcgZm9yIHN1Ym1pc3Npb25zIG9uIGJlaGFsZiBvZiBvdGhlcnMpLiBZb3UgcmVwcmVzZW50IHRoYXQgWW91ciBDb250cmlidXRpb24gc3VibWlzc2lvbnMgaW5jbHVkZSBjb21wbGV0ZSBkZXRhaWxzIG9mIGFueSB0aGlyZC1wYXJ0eSBsaWNlbnNlIG9yIG90aGVyIHJlc3RyaWN0aW9uIChpbmNsdWRpbmcsIGJ1dCBub3QgbGltaXRlZCB0bywgcmVsYXRlZCBwYXRlbnRzIGFuZCB0cmFkZW1hcmtzKSBvZiB3aGljaCB5b3UgYXJlIHBlcnNvbmFsbHkgYXdhcmUgYW5kIHdoaWNoIGFyZSBhc3NvY2lhdGVkIHdpdGggYW55IHBhcnQgb2YgWW91ciBDb250cmlidXRpb25zLgoKNi4gIFlvdSBhcmUgbm90IGV4cGVjdGVkIHRvIHByb3ZpZGUgc3VwcG9ydCBmb3IgWW91ciBDb250cmlidXRpb25zLCBleGNlcHQgdG8gdGhlIGV4dGVudCBZb3UgZGVzaXJlIHRvIHByb3ZpZGUgc3VwcG9ydC4gWW91IG1heSBwcm92aWRlIHN1cHBvcnQgZm9yIGZyZWUsIGZvciBhIGZlZSwgb3Igbm90IGF0IGFsbC4gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBZb3UgcHJvdmlkZSBZb3VyIENvbnRyaWJ1dGlvbnMgb24gYW4gIkFTIElTIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQsIGluY2x1ZGluZywgd2l0aG91dCBsaW1pdGF0aW9uLCBhbnkgd2FycmFudGllcyBvciBjb25kaXRpb25zIG9mIFRJVExFLCBOT04tIElORlJJTkdFTUVOVCwgTUVSQ0hBTlRBQklMSVRZLCBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4KCjcuICBTaG91bGQgWW91IHdpc2ggdG8gc3VibWl0IHdvcmsgdGhhdCBpcyBub3QgWW91ciBvcmlnaW5hbCBjcmVhdGlvbiwgWW91IG1heSBzdWJtaXQgaXQgdG8ge3sgLkNsYS5Db3B5cmlnaHRIb2xkZXIgfX0gc2VwYXJhdGVseSBmcm9tIGFueSBDb250cmlidXRpb24sIGlkZW50aWZ5aW5nIHRoZSBjb21wbGV0ZSBkZXRhaWxzIG9mIGl0cyBzb3VyY2UgYW5kIG9mIGFueSBsaWNlbnNlIG9yIG90aGVyIHJlc3RyaWN0aW9uIChpbmNsdWRpbmcsIGJ1dCBub3QgbGltaXRlZCB0bywgcmVsYXRlZCBwYXRlbnRzLCB0cmFkZW1hcmtzLCBhbmQgbGljZW5zZSBhZ3JlZW1lbnRzKSBvZiB3aGljaCB5b3UgYXJlIHBlcnNvbmFsbHkgYXdhcmUsIGFuZCBjb25zcGljdW91c2x5IG1hcmtpbmcgdGhlIHdvcmsgYXMgIlN1Ym1pdHRlZCBvbiBiZWhhbGYgb2YgYSB0aGlyZC1wYXJ0eTogW2luc2VydF9uYW1lX2hlcmVdIi4KCjguICBZb3UgYWdyZWUgdG8gbm90aWZ5IHt7IC5DbGEuQ29weXJpZ2h0SG9sZGVyIH19IG9mIGFueSBmYWN0cyBvciBjaXJjdW1zdGFuY2VzIG9mIHdoaWNoIHlvdSBiZWNvbWUgYXdhcmUgdGhhdCB3b3VsZCBtYWtlIHRoZXNlIHJlcHJlc2VudGF0aW9ucyBpbmFjY3VyYXRlIGluIGFueSByZXNwZWN0LgoKVGhpcyB0ZXh0IGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBbQ3JlYXRpdmUgQ29tbW9ucyBBdHRyaWJ1dGlvbiAzLjAgTGljZW5zZV0oaHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LzMuMC8pIGFuZCB0aGUgb3JpZ2luYWwgc291cmNlIGlzIHRoZSBHb29nbGUgT3BlbiBTb3VyY2UgUHJvZ3JhbXMgT2ZmaWNlLgo=\"")
	packr.PackJSONBytes("../../templates", "CODE_OF_CONDUCT.md", "\"IyBDb250cmlidXRvciBDb3ZlbmFudCBDb2RlIG9mIENvbmR1Y3QKCiMjIE91ciBQbGVkZ2UKCkluIHRoZSBpbnRlcmVzdCBvZiBmb3N0ZXJpbmcgYW4gb3BlbiBhbmQgd2VsY29taW5nIGVudmlyb25tZW50LCB3ZSBhcyBjb250cmlidXRvcnMgYW5kIG1haW50YWluZXJzIHBsZWRnZSB0byBtYWtpbmcgcGFydGljaXBhdGlvbiBpbiBvdXIgcHJvamVjdCBhbmQgb3VyIGNvbW11bml0eSBhIGhhcmFzc21lbnQtZnJlZSBleHBlcmllbmNlIGZvciBldmVyeW9uZSwgcmVnYXJkbGVzcyBvZiBhZ2UsIGJvZHkgc2l6ZSwgZGlzYWJpbGl0eSwgZXRobmljaXR5LCBnZW5kZXIgaWRlbnRpdHkgYW5kIGV4cHJlc3Npb24sIGxldmVsIG9mIGV4cGVyaWVuY2UsIG5hdGlvbmFsaXR5LCBwZXJzb25hbCBhcHBlYXJhbmNlLCByYWNlLCByZWxpZ2lvbiwgb3Igc2V4dWFsIGlkZW50aXR5IGFuZCBvcmllbnRhdGlvbi4KCiMjIE91ciBTdGFuZGFyZHMKCkV4YW1wbGVzIG9mIGJlaGF2aW9yIHRoYXQgY29udHJpYnV0ZXMgdG8gY3JlYXRpbmcgYSBwb3NpdGl2ZSBlbnZpcm9ubWVudCBpbmNsdWRlOgoKKiBVc2luZyB3ZWxjb21pbmcgYW5kIGluY2x1c2l2ZSBsYW5ndWFnZQoqIEJlaW5nIHJlc3BlY3RmdWwgb2YgZGlmZmVyaW5nIHZpZXdwb2ludHMgYW5kIGV4cGVyaWVuY2VzCiogR3JhY2VmdWxseSBhY2NlcHRpbmcgY29uc3RydWN0aXZlIGNyaXRpY2lzbQoqIEZvY3VzaW5nIG9uIHdoYXQgaXMgYmVzdCBmb3IgdGhlIGNvbW11bml0eQoqIFNob3dpbmcgZW1wYXRoeSB0b3dhcmRzIG90aGVyIGNvbW11bml0eSBtZW1iZXJzCgpFeGFtcGxlcyBvZiB1bmFjY2VwdGFibGUgYmVoYXZpb3IgYnkgcGFydGljaXBhbnRzIGluY2x1ZGU6CgoqIFRoZSB1c2Ugb2Ygc2V4dWFsaXplZCBsYW5ndWFnZSBvciBpbWFnZXJ5IGFuZCB1bndlbGNvbWUgc2V4dWFsIGF0dGVudGlvbiBvciBhZHZhbmNlcwoqIFRyb2xsaW5nLCBpbnN1bHRpbmcvZGVyb2dhdG9yeSBjb21tZW50cywgYW5kIHBlcnNvbmFsIG9yIHBvbGl0aWNhbCBhdHRhY2tzCiogUHVibGljIG9yIHByaXZhdGUgaGFyYXNzbWVudAoqIFB1Ymxpc2hpbmcgb3RoZXJzJyBwcml2YXRlIGluZm9ybWF0aW9uLCBzdWNoIGFzIGEgcGh5c2ljYWwgb3IgZWxlY3Ryb25pYyBhZGRyZXNzLCB3aXRob3V0IGV4cGxpY2l0IHBlcm1pc3Npb24KKiBPdGhlciBjb25kdWN0IHdoaWNoIGNvdWxkIHJlYXNvbmFibHkgYmUgY29uc2lkZXJlZCBpbmFwcHJvcHJpYXRlIGluIGEgcHJvZmVzc2lvbmFsIHNldHRpbmcKCiMjIE91ciBSZXNwb25zaWJpbGl0aWVzCgpQcm9qZWN0IG1haW50YWluZXJzIGFyZSByZXNwb25zaWJsZSBmb3IgY2xhcmlmeWluZyB0aGUgc3RhbmRhcmRzIG9mIGFjY2VwdGFibGUgYmVoYXZpb3IgYW5kIGFyZSBleHBlY3RlZCB0byB0YWtlIGFwcHJvcHJpYXRlIGFuZCBmYWlyIGNvcnJlY3RpdmUgYWN0aW9uIGluIHJlc3BvbnNlIHRvIGFueSBpbnN0YW5jZXMgb2YgdW5hY2NlcHRhYmxlIGJlaGF2aW9yLgoKUHJvamVjdCBtYWludGFpbmVycyBoYXZlIHRoZSByaWdodCBhbmQgcmVzcG9uc2liaWxpdHkgdG8gcmVtb3ZlLCBlZGl0LCBvciByZWplY3QgY29tbWVudHMsIGNvbW1pdHMsIGNvZGUsIHdpa2kgZWRpdHMsIGlzc3VlcywgYW5kIG90aGVyIGNvbnRyaWJ1dGlvbnMgdGhhdCBhcmUgbm90IGFsaWduZWQgdG8gdGhpcyBDb2RlIG9mIENvbmR1Y3QsIG9yIHRvIGJhbiB0ZW1wb3JhcmlseSBvciBwZXJtYW5lbnRseSBhbnkgY29udHJpYnV0b3IgZm9yIG90aGVyIGJlaGF2aW9ycyB0aGF0IHRoZXkgZGVlbSBpbmFwcHJvcHJpYXRlLCB0aHJlYXRlbmluZywgb2ZmZW5zaXZlLCBvciBoYXJtZnVsLgoKIyMgU2NvcGUKClRoaXMgQ29kZSBvZiBDb25kdWN0IGFwcGxpZXMgYm90aCB3aXRoaW4gcHJvamVjdCBzcGFjZXMgYW5kIGluIHB1YmxpYyBzcGFjZXMgd2hlbiBhbiBpbmRpdmlkdWFsIGlzIHJlcHJlc2VudGluZyB0aGUgcHJvamVjdCBvciBpdHMgY29tbXVuaXR5LiBFeGFtcGxlcyBvZiByZXByZXNlbnRpbmcgYSBwcm9qZWN0IG9yIGNvbW11bml0eSBpbmNsdWRlIHVzaW5nIGFuIG9mZmljaWFsIHByb2plY3QgZS1tYWlsIGFkZHJlc3MsIHBvc3RpbmcgdmlhIGFuIG9mZmljaWFsIHNvY2lhbCBtZWRpYSBhY2NvdW50LCBvciBhY3RpbmcgYXMgYW4gYXBwb2ludGVkIHJlcHJlc2VudGF0aXZlIGF0IGFuIG9ubGluZSBvciBvZmZsaW5lIGV2ZW50LiBSZXByZXNlbnRhdGlvbiBvZiBhIHByb2plY3QgbWF5IGJlIGZ1cnRoZXIgZGVmaW5lZCBhbmQgY2xhcmlmaWVkIGJ5IHByb2plY3QgbWFpbnRhaW5lcnMuCgojIyBFbmZvcmNlbWVudAoKSW5zdGFuY2VzIG9mIGFidXNpdmUsIGhhcmFzc2luZywgb3Igb3RoZXJ3aXNlIHVuYWNjZXB0YWJsZSBiZWhhdmlvciBtYXkgYmUgcmVwb3J0ZWQgYnkgY29udGFjdGluZyB0aGUgcHJvamVjdCB0ZWFtIGF0IHt7IC5FbWFpbHMuQ29jIH19LiBUaGUgcHJvamVjdCB0ZWFtIHdpbGwgcmV2aWV3IGFuZCBpbnZlc3RpZ2F0ZSBhbGwgY29tcGxhaW50cywgYW5kIHdpbGwgcmVzcG9uZCBpbiBhIHdheSB0aGF0IGl0IGRlZW1zIGFwcHJvcHJpYXRlIHRvIHRoZSBjaXJjdW1zdGFuY2VzLiBUaGUgcHJvamVjdCB0ZWFtIGlzIG9ibGlnYXRlZCB0byBtYWludGFpbiBjb25maWRlbnRpYWxpdHkgd2l0aCByZWdhcmQgdG8gdGhlIHJlcG9ydGVyIG9mIGFuIGluY2lkZW50LiBGdXJ0aGVyIGRldGFpbHMgb2Ygc3BlY2lmaWMgZW5mb3JjZW1lbnQgcG9saWNpZXMgbWF5IGJlIHBvc3RlZCBzZXBhcmF0ZWx5LgoKUHJvamVjdCBtYWludGFpbmVycyB3aG8gZG8gbm90IGZvbGxvdyBvciBlbmZvcmNlIHRoZSBDb2RlIG9mIENvbmR1Y3QgaW4gZ29vZCBmYWl0aCBtYXkgZmFjZSB0ZW1wb3Jhcnkgb3IgcGVybWFuZW50IHJlcGVyY3Vzc2lvbnMgYXMgZGV0ZXJtaW5lZCBieSBvdGhlciBtZW1iZXJzIG9mIHRoZSBwcm9qZWN0J3MgbGVhZGVyc2hpcC4KCiMjIEF0dHJpYnV0aW9uCgpUaGlzIENvZGUgb2YgQ29uZHVjdCBpcyBhZGFwdGVkIGZyb20gdGhlIFtDb250cmlidXRvciBDb3ZlbmFudF1baG9tZXBhZ2VdLCB2ZXJzaW9uIDEuNCwgYXZhaWxhYmxlIGF0IFtodHRwOi8vY29udHJpYnV0b3ItY292ZW5hbnQub3JnL3ZlcnNpb24vMS80XVt2ZXJzaW9uXQoKW2hvbWVwYWdlXTogaHR0cDovL2NvbnRyaWJ1dG9yLWNvdmVuYW50Lm9yZwpbdmVyc2lvbl06IGh0dHA6Ly9jb250cmlidXRvci1jb3ZlbmFudC5vcmcvdmVyc2lvbi8xLzQvCg==\"")
	packr.PackJSONBytes("../../templates", "CONTRIBUTING.md", "\"IyMgQ29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnQKCkJ5IHN1Ym1pdHRpbmcgY29kZSBhcyBhbiBpbmRpdmlkdWFsIHlvdSBhZ3JlZSB0byB0aGUKW2luZGl2aWR1YWwgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRdKC9DTEEvSU5ESVZJRFVBTF9DT05UUklCVVRPUl9MSUNFTlNFX0FHUkVFTUVOVC5tZCkuICAKQnkgc3VibWl0dGluZyBjb2RlIGFzIGFuIGVudGl0eSB5b3UgYWdyZWUgdG8gdGhlCltjb3Jwb3JhdGUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRdKC9DTEEvQ09SUE9SQVRFX0NPTlRSSUJVVE9SX0xJQ0VOU0VfQUdSRUVNRU5ULm1kKS4gIAoKPCEtLSBTaG91bGQgYWx3YXlzIGNvbWUgYXMgZmlyc3QgaXRlbSBpbiBjb250cmlidXRvciBndWlkZSEgLS0+CgotLS0KCiMjIENvbnRyaWJ1dGUgdG8gUHJvamVjdAoKVGhhbmsgeW91IGZvciB5b3VyIGludGVyZXN0IGluIGNvbnRyaWJ1dGluZyB0byB7eyAuUHJvamVjdC5OYW1lIH19LiAgClRoaXMgZ3VpZGUgaGVscHMgbWFrZSBjb250cmlidXRpbmcgdG8ge3sgLlByb2plY3QuTmFtZSB9fSBzaW1wbGUgYW5kIGVmZmljaWVudCBmb3IgZXZlcnlvbmUuCgojIyMgRmlyc3QgY29udHJpYnV0aW9uCgpJZiB5b3UgYXJlIHN0YXJ0aW5nIG91dCBjb250cmlidXRpbmcgdG8ge3sgLlByb2plY3QuTmFtZSB9fSwgdGhlcmUgbWlnaHQgYmUgc21hbGxlciBzY29wZWQgInN0YXJ0ZXIgaXNzdWVzIiBhdmFpbGFibGU6CltDdXJyZW50IHN0YXJ0ZXIgaXNzdWVzXSh7eyAuQ29udHJpYnV0aW9uTGlua3MuU3RhcnRlcklzc3VlcyB9fSkKCiMjIyBSZXBvcnQgYnVnCgpJZiB5b3UgYXJlIHN1cmUgeW91IGZvdW5kIGEgYnVnIGFuZCBubyBpc3N1ZSBleGlzdHMgeWV0LCBwbGVhc2UgZmVlbCBmcmVlIHRvIGNyZWF0ZSBhbiBpc3N1ZSBmb2xsb3dpbmcgdGhlIFtpc3N1ZSB0ZW1wbGF0ZV0oe3sgLkNvbnRyaWJ1dGlvbkxpbmtzLklzc3VlVGVtcGxhdGUgfX0pLgoKIyMjIE5ldyBmZWF0dXJlCgpBcyB5b3VyIHRpbWUgaXMgcHJlY2lvdXMgYW5kIG5vdCBhbGwgZmVhdHVyZXMgbWlnaHQgYmUgaW4gdGhlIHNjb3BlIG9mIHdoYXQgdGhlIHt7IC5Qcm9qZWN0Lk5hbWUgfX0gd2FudHMgdG8gYWNoaWV2ZSwgcGxlYXNlIG9wZW4gdXAgYW4gaXNzdWUgZmlyc3QuCgpJdCB3b3VsZCBiZSBoZWxwZnVsIHRvIGFuc3dlciBzb21lIHF1ZXN0aW9uczoKICAqIFdoeSBkbyB5b3UgbmVlZCB0aGlzIGZlYXR1cmU/CiAgKiBXaHkgZG8geW91IHRoaW5rIGl0IG1pZ2h0IGJlIHZhbHVhYmxlIGZvciBvdGhlciB1c2Vycz8KICAqIEhvdyB3b3VsZCB5b3UgaW1wbGVtZW50IHRoZSBmZWF0dXJlPwoKIyMgSGVscGluZyBPdGhlcnMKClBsZWFzZSBoZWxwIG90aGVyIHVzZXJzIHdoZW5ldmVyIHlvdSBjYW4uCgp7eyB3aXRoIC5TdXBwb3J0UGxhdGZvcm1zIH19VGhlcmUgYXJlIHZhcmlvdXMgcGxhY2VzIGZvciBoZWxwaW5nIG90aGVyczoKe3sgcmFuZ2UgLiB9fSogW3t7IC5TZXJ2aWNlIH19XSh7eyAuTGluayB9fSkKe3sgZW5kIH19e3sgZW5kIH19CgojIyBVc2VyIFN1cHBvcnQvUXVlc3Rpb25zCgpOb24gdGVjaG5pY2FsIG9yIHVzZXIgY2VudHJpYyBzdXBwb3J0IG1pZ2h0IGJlIGF2YWlsYWJsZSBmcm9tIHRoZSBjb21tdW5pdHkgZm9yIG1vcmUgaW5mb3JtYXRpb24gcmVhZCBvdXIgW3N1cHBvcnQgZ3VpZGVsaW5lc10oL1NVUFBPUlQubWQpCgojIyBJc3N1ZS9QdWxsIFJlcXVlc3QvTWVyZ2UgUmVxdWVzdCBDbG9zaW5nIFBvbGljeQoKVGltZSBpcyBwcmVjaW91cyBhbmQgc3BhcnNlLCBwbGVhc2UgY29uc2lkZXIgdGhpcyBhbmQgc2VhcmNoIHRocm91Z2ggYXZhaWxhYmxlIGlzc3VlcyBmaXJzdC4KClRyZWF0IGV2ZXJ5IHBhcnRpY2lwYW50IHdpdGggY291cnRlc3ksIHJlc3BlY3QgYW5kIGFkZCBhcyBtdWNoIGluZm9ybWF0aW9uIHdoZW4gY3JlYXRpbmcgYW4gaXNzdWUgb3IgcHVsbC9tZXJnZSByZXF1ZXN0LgoKQWxsIGlzc3VlcyBhbmQgcHVsbC9tZXJnZSByZXF1ZXN0cyBzaG91bGQgYmUgaW4gRW5nbGlzaCBhbmQgcmVmcmFpbiBmcm9tIHVzaW5nIGFueSBpbmFwcHJvcHJpYXRlIGxhbmd1YWdlLgoKQW55IGlzc3VlcyBvciBwdWxsL21lcmdlIHJlcXVlc3RzIG5vdCBmb2xsb3dpbmcgb3VyIFtjb2RlIG9mIGNvbmR1Y3RdKC9DT0RFX09GX0NPTkRVQ1QubWQpIG9yIGFueSBvdGhlciBndWlkZWxpbmVzIHByb3ZpZGVkIG1heSBiZSBjbG9zZWQgd2l0aG91dCBub3RpY2Ugb3V0IG9mIHJlc3BlY3QgZm9yIG91ciB2b2x1bnRlZXJzLgoKSW5hY3RpdmUgaXNzdWVzIG9yIHB1bGwvbWVyZ2UgcmVxdWVzdHMgbWF5IGJlIGNsb3NlZCBhZnRlciBhIHNwZWNpZmljIHBlcmlvZC4gVGhpcyBlbmFibGVzIHVzIHRvIGZvY3VzIGFuZCB3b3JrIG9uIHRoZSBjdXJyZW50L3ByaW1hcnkgaXRlbXMuCgojIyMgUHVsbCBSZXF1ZXN0L01lcmdlIFJlcXVlc3QgR3VpZGVsaW5lcwoKUGxlYXNlIGtlZXAgdGhlIGNoYW5nZSBpbiBhIHNpbmdsZSBwdWxsL21lcmdlIHJlcXVlc3QgKiphcyBzbWFsbCBhcyBwb3NzaWJsZSoqLiAgCklmIHlvdSB3YW50IHRvIGNvbnRyaWJ1dGUgYSBsYXJnZSBmZWF0dXJlIHRoaW5rIHZlcnkgaGFyZCB3aGF0IHRoZSBtaW5pbXVtIHZpYWJsZSBjaGFuZ2UgaXMuICAKVGhlIHNtYWxsZXIgYSBwdWxsL21lcmdlIHJlcXVlc3QgaXMgdGhlIG1vcmUgbGlrZWx5IGl0IGlzIGl0IHdpbGwgYmUgbWVyZ2VkIChxdWlja2x5KS4gIApBZnRlcndhcmRzIGZvbGxvdy11cCByZXF1ZXN0cyBmb3IgZW5oYW5jZW1lbnRzIGFyZSBhcHByZWNpYXRlZC4gIAoKIyMjIENvbnRyaWJ1dGlvbiBBY2NlcHRhbmNlIENyaXRlcmlhCgoqIFRoZSBjaGFuZ2UgaXMgYXMgc21hbGwgYXMgcG9zc2libGUKKiBJbmNsdWRlcyBwcm9wZXIgdGVzdHMgYW5kIHBhc3NlcyBhbGwgdGVzdHMKKiBEb2VzIG5vdCBicmVhayBhbnkgZXhpc3RpbmcgZnVuY3Rpb25hbGl0eQoqIEZpeGVzIG9uZSBzcGVjaWZpYyBpc3N1ZSBvciBpbXBsZW1lbnRzIG9uZSBzcGVjaWZpYyBmZWF0dXJlIChkbyBub3QgY29tYmluZSB0aGluZ3MsIHNlbmQgc2VwYXJhdGUgcmVxdWVzdHMgaWYgbmVlZGVkKQoqIENvbnRhaW5zIGZ1bmN0aW9uYWxpdHkgd2UgdGhpbmsgb3RoZXIgdXNlcnMgd2lsbCBiZW5lZml0IGZyb20gdG9vCiogSWYgdGhlIHJlcXVlc3QgYWRkcyBhbnkgbmV3IGxpYnJhcmllcywgdGhleSBzaG91bGQgaGF2ZSBhIGNvbXBhdGlibGUgbGljZW5zZS4K\"")
	packr.PackJSONBytes("../../templates", "LICENSE", "\"e3stIGlmIGVxIC5Qcm9qZWN0Lk1haW5MaWNlbnNlICJBR1BMdjMiIC19fQogIHt7dGVtcGxhdGUgImxpY2Vuc2UtcGFydGlhbHMvQUdQTHYzIiAufX0Ke3stIGVsc2UgaWYgZXEgLlByb2plY3QuTWFpbkxpY2Vuc2UgIkdQTHYzIiAtfX0KICB7e3RlbXBsYXRlICJsaWNlbnNlLXBhcnRpYWxzL0dQTHYzIiAufX0Ke3stIGVsc2UgaWYgZXEgLlByb2plY3QuTWFpbkxpY2Vuc2UgIk1JVCIgLX19CiAge3t0ZW1wbGF0ZSAibGljZW5zZS1wYXJ0aWFscy9NSVQiIC59fQp7ey0gZWxzZSBpZiBlcSAuUHJvamVjdC5NYWluTGljZW5zZSAiQ0MwIiAtfX0KICB7e3RlbXBsYXRlICJsaWNlbnNlLXBhcnRpYWxzL2NyZWF0aXZlQ29tbW9uczAiIC59fQp7ey0gZWxzZSBpZiBlcSAuUHJvamVjdC5NYWluTGljZW5zZSAiQ0NCeU5jIiAtfX0KICB7e3RlbXBsYXRlICJsaWNlbnNlLXBhcnRpYWxzL2NyZWF0aXZlQ29tbW9uc0J5TmMiIC59fQp7ey0gZWxzZSBpZiBlcSAuUHJvamVjdC5NYWluTGljZW5zZSAiQ0NCeSIgLX19CiAge3t0ZW1wbGF0ZSAibGljZW5zZS1wYXJ0aWFscy9jcmVhdGl2ZUNvbW1vbnNCeSIgLn19Cnt7LSBlbHNlIGlmIGVxIC5Qcm9qZWN0Lk1haW5MaWNlbnNlICJDQ0J5TmNTYSIgLX19CiAge3t0ZW1wbGF0ZSAibGljZW5zZS1wYXJ0aWFscy9jcmVhdGl2ZUNvbW1vbnNCeU5jU2EiIC59fQp7ey0gZWxzZSBpZiBlcSAuUHJvamVjdC5NYWluTGljZW5zZSAiQ0NCeVNhIiAtfX0KICB7e3RlbXBsYXRlICJsaWNlbnNlLXBhcnRpYWxzL2NyZWF0aXZlQ29tbW9uc0J5U2EiIC59fQp7ey0gZWxzZSAtfX0KICB7e3RlbXBsYXRlICJsaWNlbnNlLXBhcnRpYWxzL0FwYWNoZVYyIiAufX0Ke3stIGVuZCB9fQo=\"")
	packr.PackJSONBytes("../../templates", "OWNERS", "\"IyBDdXJyZW50IE93bmVycy9NYWludGFpbmVycy4Ke3sgcmFuZ2UgLk1haW50YWluZXJzIC19fQogIHt7IC5OYW1lIH19ICh7eyAuTmljayB9fSkKe3sgZW5kIC19fQo=\"")
	packr.PackJSONBytes("../../templates", "README.md", "\"e3stIGlmIC5Qcm9qZWN0LkltYWdlIC19fQogIHt7LSBpZiAuUHJvamVjdC5XZWJzaXRlIC19fQogICAge3stIHByaW50ZiAiPGEgaHJlZj0nJXMnPjxpbWcgc3JjPSclcycgd2lkdGg9JzUwMCcvPjwvYT4iIC5Qcm9qZWN0LldlYnNpdGUgLlByb2plY3QuSW1hZ2UgLX19CiAge3stIGVsc2UgLX19CiAgICB7ey0gcHJpbnRmICI8aW1nIHNyYz0nJXMnIHdpZHRoPSc1MDAnLz4iIC5Qcm9qZWN0LkltYWdlIC19fQogIHt7LSBlbmQgLX19Cnt7LSBlbHNlIC19fQojIHt7IC5Qcm9qZWN0Lk5hbWUgfX0Ke3stIGVuZCB9fQp7eyAiIiB9fQp7eyAuUHJvamVjdC5PbmVMaW5lciB9fQoKe3sgcmFuZ2UgLkJhZGdlcyB9fQogIHt7LSBwcmludGYgIiBbIVslc10oJXMpXSglcykiIC5BbHQgLkltYWdlIC5MaW5rIC19fQp7eyBlbmQgfX0KCnt7ICIiIH19Cnt7LSBpZiBlcSAuUHJvamVjdC5TdGF0ZSAiYmV0YSIgfX0KICB7ey0gcHJpbnRmICIqKk5PVEU6IFRoaXMgaXMgYSBiZXRhIHJlbGVhc2UsIHdlIGRvIG5vdCBjb25zaWRlciBpdCBjb21wbGV0ZWx5IHByb2R1Y3Rpb24gcmVhZHkgeWV0LiBVc2UgYXQgeW91ciBvd24gcmlzay4qKiIgLX19Cnt7IGVuZCB9fQoKe3stIGlmIGVxIC5Qcm9qZWN0LlN0YXRlICJ1bnN0YWJsZSIgLX19CiAge3stIHByaW50ZiAiKipOT1RFOiBUaGlzIGlzIGEgd29yay1pbi1wcm9ncmVzcywgd2UgZG8gbm90IGNvbnNpZGVyIGl0IHByb2R1Y3Rpb24gcmVhZHkuIFVzZSBhdCB5b3VyIG93biByaXNrLioqIiAtfX0Ke3sgZW5kIH19Cgp7eyAiIiB9fQp7ey0gaWYgLlByb2plY3QuSW1hZ2UgLX19Cnt7LSBwcmludGYgIiMgJXMiIC5Qcm9qZWN0Lk5hbWUgfX0Ke3sgZW5kIC19fQp7eyAuUHJvamVjdC5EZXNjcmlwdGlvbiAtfX0KCnt7ICIiIH19Cnt7IHByaW50ZiAiIyMgVXNpbmcgJXMiIC5Qcm9qZWN0Lk5hbWUgfX0Ke3sgd2l0aCAuUmVhZG1lLlVzYWdlRXhhbXBsZSAtfX0KICB7ey0gLiAtfX0Ke3stIGVuZCAtfX0KCnt7LSB3aXRoIC5TdXBwb3J0TGlua3MuRG9jdW1lbnRhdGlvbiAtfX0KVGFrZSBhIGxvb2sgYXQgb3VyIGZ1bGwgW2RvY3VtZW50YXRpb25dKHt7IC4gfX0pLgp7ey0gZW5kIH19CgojIyBTdXBwb3J0CkZvciBkZXRhaWxlZCBpbmZvcm1hdGlvbiBvbiBzdXBwb3J0IG9wdGlvbnMgc2VlIG91ciBbc3VwcG9ydCBndWlkZV0oL1NVUFBPUlQubWQpLgoKIyMgSGVscGluZyBvdXQKQmVzdCBwbGFjZSB0byBzdGFydCBpcyBvdXIgW2NvbnRyaWJ1dGlvbiBndWlkZV0oL0NPTlRSSUJVVElORy5tZCkuCgotLS0tCgp7eyBpZiBlcSAuUHJvamVjdC5NYWluTGljZW5zZSAiQ0NCeSIgfX0KICB7ey0gcHJpbnRmICIqQ29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgWyVzXSgvTElDRU5TRSkuKiAgIiAocHJpbnQgIkNyZWF0aXZlIENvbW1vbnMgQlkgNC4wIikgfX0Ke3sgZWxzZSBpZiBlcSAuUHJvamVjdC5NYWluTGljZW5zZSAiQ0NTYSIgfX0KICB7ey0gcHJpbnRmICIqQ29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgWyVzXSgvTElDRU5TRSkuKiAgIiAocHJpbnQgIkNyZWF0aXZlIENvbW1vbnMgU0EgNC4wIikgfX0Ke3sgZWxzZSBpZiBlcSAuUHJvamVjdC5NYWluTGljZW5zZSAiQ0NCeVNhIiB9fQogIHt7LSBwcmludGYgIipDb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBbJXNdKC9MSUNFTlNFKS4qICAiIChwcmludCAiQ3JlYXRpdmUgQ29tbW9ucyBCWS1TQSA0LjAiKSB9fQp7eyBlbHNlIGlmIGVxIC5Qcm9qZWN0Lk1haW5MaWNlbnNlICJDQ0J5TmNTYSIgfX0KICB7ey0gcHJpbnRmICIqQ29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgWyVzXSgvTElDRU5TRSkuKiAgIiAocHJpbnQgIkNyZWF0aXZlIENvbW1vbnMgQlktTkMtU0EgNC4wIikgfX0Ke3sgZWxzZSBpZiBlcSAuUHJvamVjdC5NYWluTGljZW5zZSAiQ0MwIiB9fQogIHt7LSBwcmludGYgIipDb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBbJXNdKC9MSUNFTlNFKS4qICAiIChwcmludCAiQ3JlYXRpdmUgQ29tbW9ucyBDQzAgMS4wIikgfX0Ke3sgZWxzZSB9fQogIHt7LSBwcmludGYgIipDb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBbJXNdKC9MSUNFTlNFKS4qICAiIChwcmludCAiQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wIikgfX0Ke3sgZW5kIC19fQoKe3sgaWYgZXEgLlByb2plY3QuRG9jc0xpY2Vuc2UgImFwYWNoZTIiIH19CiAge3stIHByaW50ZiAiKkRvY3VtZW50YXRpb24vZXhhbXBsZXMgYXJlIGxpY2Vuc2VkIHVuZGVyIFslc10oL2RvY3MvTElDRU5TRSkuKiAgIiAocHJpbnQgIkFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCIpIH19Cnt7IGVsc2UgaWYgZXEgLlByb2plY3QuTWFpbkxpY2Vuc2UgIkNDQnkiIH19CiAge3stIHByaW50ZiAiKkRvY3VtZW50YXRpb24vZXhhbXBsZXMgYXJlIGxpY2Vuc2VkIHVuZGVyIFslc10oL2RvY3MvTElDRU5TRSkuKiAgIiAocHJpbnQgIkNyZWF0aXZlIENvbW1vbnMgQlkgNC4wIikgfX0Ke3sgZWxzZSBpZiBlcSAuUHJvamVjdC5NYWluTGljZW5zZSAiQ0NTYSIgfX0KICB7ey0gcHJpbnRmICIqRG9jdW1lbnRhdGlvbi9leGFtcGxlcyBhcmUgbGljZW5zZWQgdW5kZXIgWyVzXSgvZG9jcy9MSUNFTlNFKS4qICAiIChwcmludCAiQ3JlYXRpdmUgQ29tbW9ucyBTQSA0LjAiKSB9fQp7eyBlbHNlIGlmIGVxIC5Qcm9qZWN0Lk1haW5MaWNlbnNlICJDQ0J5TmNTYSIgfX0KICB7ey0gcHJpbnRmICIqRG9jdW1lbnRhdGlvbi9leGFtcGxlcyBhcmUgbGljZW5zZWQgdW5kZXIgWyVzXSgvZG9jcy9MSUNFTlNFKS4qICAiIChwcmludCAiQ3JlYXRpdmUgQ29tbW9ucyBCWS1OQy1TQSA0LjAiKSB9fQp7eyBlbHNlIGlmIGVxIC5Qcm9qZWN0Lk1haW5MaWNlbnNlICJDQzAiIH19CiAge3stIHByaW50ZiAiKkRvY3VtZW50YXRpb24vZXhhbXBsZXMgYXJlIGxpY2Vuc2VkIHVuZGVyIFslc10oL2RvY3MvTElDRU5TRSkuKiAgIiAocHJpbnQgIkNyZWF0aXZlIENvbW1vbnMgQ0MwIDEuMCIpIH19Cnt7IGVsc2UgfX0KICB7ey0gcHJpbnRmICIqRG9jdW1lbnRhdGlvbi9leGFtcGxlcyBhcmUgbGljZW5zZWQgdW5kZXIgWyVzXSgvZG9jcy9MSUNFTlNFKS4qICAiIChwcmludCAiQ3JlYXRpdmUgQ29tbW9ucyBCWS1TQSA0LjAiKSB9fQp7eyBlbmQgLX19CgoqSWxsdXN0cmF0aW9ucywgdHJhZGVtYXJrcyBhbmQgdGhpcmQtcGFydHkgcmVzb3VyY2VzIGFyZSBvd25lZCBieSB0aGVpciByZXNwZWN0aXZlIHBhcnR5IGFuZCBhcmUgc3ViamVjdCB0byBkaWZmZXJlbnQgbGljZW5zaW5nLioKCi0tLQoKe3sgaWYgLkNvcHlyaWdodC5Pd25lciAtfX0KICB7eyBwcmludGYgIkNvcHlyaWdodCAlcyAtICVzIiAuQ29weXJpZ2h0LlllYXIgLkNvcHlyaWdodC5Pd25lciB9fQp7ey0gZWxzZSAtfX0KICB7eyBwcmludGYgIkNvcHlyaWdodCAlcyAtICVzIiAuQ29weXJpZ2h0LlllYXIgKHByaW50ZiAiVGhlICVzIEF1dGhvcnMiIC5Qcm9qZWN0Lk5hbWUpIH19Cnt7IGVuZCB9fQo=\"")
	packr.PackJSONBytes("../../templates", "SECURITY.md", "\"IyBTZWN1cml0eSBWdWxuZXJhYmlsaXR5IERpc2Nsb3N1cmUKClBsZWFzZSByZXBvcnQgYW55IHN1c3BlY3RlZCBzZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMgcHJpdmF0ZWx5IHRvIHt7IC5FbWFpbHMuU2VjdXJpdHkgfX0uClBsZWFzZSBkbyAqKk5PVCoqIGNyZWF0ZSBwdWJsaWNseSB2aWV3YWJsZSBpc3N1ZXMgZm9yIHN1c3BlY3RlZCBzZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMuCgpXZSB3aWxsIGFja25vd2xlZGdlIHJlY2VpcHQgb2YgeW91ciB2dWxuZXJhYmlsaXR5IHJlcG9ydCBhcyBzb29uIGFzIHBvc3NpYmxlIGFuZCBzdHJpdmUgdG8gc2VuZCB5b3UgcmVndWxhciB1cGRhdGVzIGFib3V0IG91ciBwcm9ncmVzcy4KSWYgeW91J3JlIGN1cmlvdXMgYWJvdXQgdGhlIHN0YXR1cyBvZiB5b3VyIGRpc2Nsb3N1cmUgcGxlYXNlIGZlZWwgZnJlZSB0byBlbWFpbCB1cyBhZ2Fpbi4KSWYgeW91IHdhbnQgdG8gZW5jcnlwdCB5b3VyIGRpc2Nsb3N1cmUgZW1haWwgcGxlYXNlIGVtYWlsIHVzIHRvIGFzayBmb3Igb3VyIFBHUCBrZXkuCgpQbGVhc2UgcmVmcmFpbiBmcm9tIHJlcXVlc3RpbmcgY29tcGVuc2F0aW9uIGZvciByZXBvcnRpbmcgdnVsbmVyYWJpbGl0aWVzLgpJZiB5b3Ugd2FudCB3ZSB3aWxsIHB1YmxpY2x5IGFja25vd2xlZGdlIHlvdXIgcmVzcG9uc2libGUgZGlzY2xvc3VyZS4KV2UgYWxzbyB0cnkgdG8gbWFrZSB0aGUgaXNzdWUgcHVibGljIGFmdGVyIHRoZSB2dWxuZXJhYmlsaXR5IGlzIGFubm91bmNlZC4KVXN1YWxseSBidWcgcmVwb3J0cyBhcmUgbWFkZSBwdWJsaWMgYWZ0ZXIgMzAgZGF5cywgaWYgcG9zc2libGUuCgpZb3UgYXJlIG5vdCBhbGxvd2VkIHRvIHNlYXJjaCBmb3Igc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzIG9uIGFueSBob3N0ZWQgc2VydmljZSBvZiB7eyAuUHJvamVjdC5OYW1lIH19IHdpdGhvdXQgdGhlIGNvbnNlbnQgb2YgdGhlIHBhcnR5IGhvc3RpbmcgaXQuCnt7IC5Qcm9qZWN0Lk5hbWUgfX0gaXMgb3BlbiBzb3VyY2Ugc29mdHdhcmUgYW5kIGNhbiBiZSBpbnN0YWxsZWQgZm9yIHRlc3RpbmcgYW5kIHNlY3VyaXR5IGlzc3VlcyBvbiB5b3VyIG93biBpbmZyYXN0cnVjdHVyZS4K\"")
	packr.PackJSONBytes("../../templates", "SUPPORT.md", "\"IyBTdXBwb3J0IHVzaW5nIHt7IC5Qcm9qZWN0Lk5hbWUgfX0KCldlbGNvbWUgdG8ge3sgLlByb2plY3QuTmFtZSB9fSEgV2UgdXNlIHt7IC5SZXBvLlR5cGUgfX0gZm9yIHRyYWNraW5nIGJ1Z3MgYW5kIGZlYXR1cmUgcmVxdWVzdHMuCnt7IGlmIC5TdXBwb3J0UGxhdGZvcm1zIH19ClRoaXMgaXNuJ3QgdGhlIHJpZ2h0IHBsYWNlIHRvIGdldCBzdXBwb3J0IGZvciB1c2luZyB7eyAuUHJvamVjdC5OYW1lIH19LiBZb3UgY2FuIGZpbmQgdXNlciBjZW50cmljIHJlc291cmNlcyBiZWxvdy4KCklmIHlvdSdyZSB1bnN1cmUgd2hlcmUgdG8gcG9zdCwgdXNlIG9uZSBvZiB0aGUgW2NvbW11bml0eSBwbGF0Zm9ybXNdKCNjb21tdW5pdHktc3VwcG9ydCkuCgpJZiB5b3VyIHBhcnRpY3VsYXIgaXNzdWUgdHVybnMgb3V0IHRvIGJlIGEgYnVnLCBpdCB3aWxsIGZpbmQgaXRzIHdheSBmcm9tIHRoZXJlLgoKe3sgZW5kIC19fQoKVGhlcmUgYXJlIGhlbHBmdWwgdm9sdW50ZWVycyB3aG8gbWF5IGJlIGFibGUgdG8gaGVscCB5b3UuCgpJZiBpdCBoYXBwZW5zIHRoYXQgeW91IGtub3cgdGhlIHNvbHV0aW9uIHRvIGFuIGV4aXN0aW5nIGJ1ZywgcGxlYXNlIGZpcnN0IG9wZW4gdGhlIGlzc3VlIGluIG9yZGVyIHRvIGtlZXAgdHJhY2sgb2YgaXQuCkFmdGVyd2FyZHMgb3BlbiB0aGUgcmVsZXZhbnQgcHVsbC9tZXJnZSByZXF1ZXN0IHRoYXQgcG90ZW50aWFsbHkgZml4ZXMgaXQuCgpQbGVhc2UgcmVtZW1iZXIgdGhpcyBpcyBhIGNvbW11bml0eSBwcm9qZWN0IGFuZCB5b3UgYXJlIG5vdCBlbnRpdGxlZCB0byBmcmVlIHN1cHBvcnQuCkJlIGtpbmQgdG8gYW55b25lIGhlbHBpbmcgb3V0LgoKe3sgd2l0aCAuRW1haWxzLkNvbW1lcmNpYWxTdXBwb3J0IC19fQogIHt7IHByaW50ZiAiRm9yIGNvbW1lcmNpYWwgc3VwcG9ydCByZWFjaCBvdXQgdG8gJXMiIC4gfX0Ke3stIGVuZCAtfX0KCnt7ICIiIH19Cnt7IGlmIC5TdXBwb3J0UGxhdGZvcm1zIH19CiMjIENvbW11bml0eSBTdXBwb3J0ClRoZSB7eyAuUHJvamVjdC5OYW1lIH19IGNvbW11bml0eSBtaWdodCBiZSBhY3RpdmUgb24gdmFyaW91cyBwbGF0Zm9ybXMuCgp7eyB3aXRoIC5TdXBwb3J0UGxhdGZvcm1zIC19fQogIFRoZSBjdXJyZW50IHBsYXRmb3JtcyB1c2VkIGJ5IHRoZSBjb21tdW5pdHk6CiAge3sgcmFuZ2UgLiAtfX0KICAgICogW3t7IC5TZXJ2aWNlIH19XSh7eyAuTGluayB9fSkKICB7eyBlbmQgLX19Cnt7IGVuZCB9fQoKe3stIGVuZCAtfX0KCnt7ICIiIH19CiMjIERvY3VtZW50YXRpb24Ke3stIHdpdGggLlN1cHBvcnRMaW5rcy5Eb2N1bWVudGF0aW9uIH19CiAge3sgcHJpbnRmICIqIFtVc2VyIERvY3VtZW50YXRpb25dKCVzKSIgLiB9fQp7eyBlbmQgLX19Cnt7LSB3aXRoIC5TdXBwb3J0TGlua3MuVHJvdWJsZXNob290aW5nIH19CiAge3sgcHJpbnRmICIqIFtUcm91Ymxlc2hvb3RpbmcgR3VpZGVdKCVzKSIgLiB9fQp7eyBlbmQgLX19Cg==\"")
	packr.PackJSONBytes("../../templates", "USERS.md", "\"KiBbQWRvcHRlciBBXShodHRwczovL2V4YW1wbGUuY29tKSB1c2VzIHt7IC5Qcm9qZWN0Lk5hbWUgfX0gaW4gaXRzIHNlcnZpY2UuCiogW0Fkb3B0ZXIgQl0oaHR0cHM6Ly9leGFtcGxlLmNvbSkgdXNlcyB7eyAuUHJvamVjdC5OYW1lIH19IGluIGl0cyBzZXJ2aWNlLgoqIFtBZG9wdGVyIENdKGh0dHBzOi8vZXhhbXBsZS5jb20pIHVzZXMge3sgLlByb2plY3QuTmFtZSB9fSBpbiBpdHMgc2VydmljZS4K\"")
	packr.PackJSONBytes("../../templates", "VERSION", "\"e3sgLlByb2plY3QuVmVyc2lvbiB9fQo=\"")
	packr.PackJSONBytes("../../templates", "VISION.md", "\"IyBWaXNpb24Ke3sgLlByb2plY3QuTmFtZSB9fSBpcyBhIHt7IHdpdGggLlZpc2lvbi5UeXBlIH19e3sgLiB9fXt7IGVsc2UgfX1wZXJzb25hbHt7IGVuZCB9fSBwcm9qZWN0LiBGcm9tIG91ciBjdXJyZW50IHZpZXdwb2ludCwgaXRzIHJvbGUgaXM6Cnt7IC5WaXNpb24uT3ZlcnZpZXcgfX0KCnt7LSB3aXRoIC5WaXNpb24uSXRlbXMgfX0KT3VyIGRldGFpbGVkIGl0ZW1zOgogIHt7IHJhbmdlIC4gLX19CiAgICAqIHt7IC4gfX0Ke3sgZW5kIC19fQp7ey0gZW5kIC19fQoKe3sgd2l0aCAuVmlzaW9uLkNvbmNlcHQgfX0KIyMgQ29yZSBDb25jZXB0Cnt7IC4gLX19Cnt7IGVuZCAtfX0KCnt7ICIiIH19Cnt7IHdpdGggLlZpc2lvbi5BaW0gfX0KIyMgR2VuZXJhbCBBaW0Ke3sgLiAtfX0Ke3sgZW5kIH19CgojIyBDb21tdW5pY2F0aW9uCkEgbG90IG9mIGRpc2N1c3Npb24gYWJvdXQge3sgLlByb2plY3QuTmFtZSB9fSBoYXBwZW5zIHdpdGhpbiB7eyAuUmVwby5UeXBlIH19IGlzc3Vlcy4gSWRlYWxseSwgd2Ugd2lsbCBrZWVwIGl0IHRoYXQgd2F5IHVudGlsIHt7IC5Qcm9qZWN0Lk5hbWUgfX0gYmVjb21lcyBiaWcgZW5vdWdoIHRoYXQgdGhpcyB0dXJucyBpbnRvIGEgcHJvYmxlbS4gVGhlIGFkdmFudGFnZXMgb2YgdGhpcyBpcyB0aGF0IGFsbCBkb2N1bWVudGF0aW9uIGFuZCBpc3N1ZXMgYXJlIHB1YmxpY2x5IHNlYXJjaGFibGUgYW5kIGVhc2lseSBsaW5rZWQgdG8gdGhlIHNvdXJjZSBjb2RlLgoKIyMgQ29udHJpYnV0aW9ucwpUaGUge3sgLlByb2plY3QuTmFtZSB9fSBwcm9qZWN0IHNob3VsZCBhbHdheXMgYWltIHRvIGRldm90ZSBhIGxvdCBvZiB0aW1lIHRvIG1ha2luZyBjb250cmlidXRvcnMgZmVlbCBsaWtlIGFuIGltcG9ydGFudCBwYXJ0IG9mIHRoZSBjb21tdW5pdHkuIFdlIHNob3VsZCBzdHJpdmUgdG8gcHJvdmlkZSBhIHBsYWNlIGZvciBhbnlvbmUgdG8gYmUgYWJsZSB0byBjb250cmlidXRlLiBUaGUgYWltIG9mIHRoZSBjb3JlIHRlYW0gc2hvdWxkIGJlIHRvIHdvcmsgb24gd2F5cyB0byBzaG93Y2FzZSBjb250cmlidXRpb25zLCBlbmNvdXJhZ2UgYWRvcHRpb24gYW5kIHNob3cgb2ZmIGdyZWF0IHdvcmsuIEFuIGV4YW1wbGUgb2Ygd2hlcmUgdGhpcyB3b3JrZWQgaXMgdGhlIFtDb2NvYVBvZHMgUXVhbGl0eSBJbmRleF0oaHR0cDovL2Jsb2cuY29jb2Fwb2RzLm9yZy9Db2NvYVBvZHMub3JnLVR3by1wb2ludC1GaXZlLykuCg==\"")
	packr.PackJSONBytes("../../templates", "docs/LICENSE", "\"e3stIGlmIGVxIC5Qcm9qZWN0LkRvY3NMaWNlbnNlICJjcmVhdGl2ZUNvbW1vbnMwIiAtfX0KICB7e3RlbXBsYXRlICJsaWNlbnNlLXBhcnRpYWxzL2NyZWF0aXZlQ29tbW9uczAiIC59fQp7ey0gZWxzZSBpZiBlcSAuUHJvamVjdC5Eb2NzTGljZW5zZSAiY3JlYXRpdmVDb21tb25zQnlOYyIgLX19CiAge3t0ZW1wbGF0ZSAibGljZW5zZS1wYXJ0aWFscy9jcmVhdGl2ZUNvbW1vbnNCeU5jIiAufX0Ke3stIGVsc2UgaWYgZXEgLlByb2plY3QuRG9jc0xpY2Vuc2UgImNyZWF0aXZlQ29tbW9uc0J5IiAtfX0KICB7e3RlbXBsYXRlICJsaWNlbnNlLXBhcnRpYWxzL2NyZWF0aXZlQ29tbW9uc0J5IiAufX0Ke3stIGVsc2UgaWYgZXEgLlByb2plY3QuRG9jc0xpY2Vuc2UgImNyZWF0aXZlQ29tbW9uc0J5TmNTYSIgLX19CiAge3t0ZW1wbGF0ZSAibGljZW5zZS1wYXJ0aWFscy9jcmVhdGl2ZUNvbW1vbnNCeU5jU2EiIC59fQp7ey0gZWxzZSAtfX0KICB7e3RlbXBsYXRlICJsaWNlbnNlLXBhcnRpYWxzL2NyZWF0aXZlQ29tbW9uc0J5U2EiIC59fQp7ey0gZW5kIH19Cg==\"")
	packr.PackJSONBytes("../../templates", "docs/README.md", "\"PCEtLQp7eyBpZiAuQ29weXJpZ2h0Lk93bmVyIC19fQogIHt7IHByaW50ZiAiQ29weXJpZ2h0ICVzIC0gJXMiIC5Db3B5cmlnaHQuWWVhciAuQ29weXJpZ2h0Lk93bmVyIH19Cnt7LSBlbHNlIC19fQogIHt7IHByaW50ZiAiQ29weXJpZ2h0ICVzIC0gJXMiIC5Db3B5cmlnaHQuWWVhciAocHJpbnRmICJUaGUgJXMgQXV0aG9ycyIgLlByb2plY3QuTmFtZSkgfX0Ke3sgZW5kIH19ClRoaXMgd29yayBpcyBsaWNlbnNlZCB1bmRlciBhIENyZWF0aXZlIENvbW1vbnMgQXR0cmlidXRpb24tU2hhcmVBbGlrZSA0LjAgSW50ZXJuYXRpb25hbCBMaWNlbnNlOwp5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogICAgaHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LXNhLzQuMC9sZWdhbGNvZGUKVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBkb2N1bWVudGF0aW9uCmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgpTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgotLT4KCnt7ICIiIH19Cnt7IHByaW50ZiAiIyMgRGV2ZWxvcG1lbnQiIH19Cnt7IHdpdGggLkRvY3MuRGV2ZWxvcG1lbnQgLX19CiAge3stIC4gLX19Cnt7LSBlbmQgLX19CgojIERvY3VtZW50YXRpb24KCk5vIGRvY3VtZW50YXRpb24gYXZhaWxhYmxlIHlldC4gU3RhcnQgeW91ciBmaXJzdCBjb250cmlidXRpb24gd2l0aCBzb21lIGRvY3VtZW50YXRpb24uCgpTZWUgaG93IHlvdSBjYW4gY29udHJpYnV0ZSB3aXRoIG91ciBbY29udHJpYnV0aW9uIGd1aWRlXSgvQ09OVFJJQlVUSU5HLm1kKS4K\"")
	packr.PackJSONBytes("../../templates", "examples/LICENSE", "\"e3t0ZW1wbGF0ZSAiZG9jcy9MSUNFTlNFIiAufX0=\"")
	packr.PackJSONBytes("../../templates", "examples/README.md", "\"PCEtLQp7eyBpZiAuQ29weXJpZ2h0Lk93bmVyIC19fQogIHt7IHByaW50ZiAiQ29weXJpZ2h0ICVzIC0gJXMiIC5Db3B5cmlnaHQuWWVhciAuQ29weXJpZ2h0Lk93bmVyIH19Cnt7LSBlbHNlIC19fQogIHt7IHByaW50ZiAiQ29weXJpZ2h0ICVzIC0gJXMiIC5Db3B5cmlnaHQuWWVhciAocHJpbnRmICJUaGUgJXMgQXV0aG9ycyIgLlByb2plY3QuTmFtZSkgfX0Ke3sgZW5kIH19ClRoaXMgd29yayBpcyBsaWNlbnNlZCB1bmRlciBhIENyZWF0aXZlIENvbW1vbnMgQXR0cmlidXRpb24tU2hhcmVBbGlrZSA0LjAgSW50ZXJuYXRpb25hbCBMaWNlbnNlOwp5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogICAgaHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LXNhLzQuMC9sZWdhbGNvZGUKVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBkb2N1bWVudGF0aW9uCmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgpTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgotLT4KCiMgRXhhbXBsZXMKCk5vIGV4YW1wbGVzIGFyZSBhdmFpbGFibGUgeWV0LCBidXQgd2UgYXJlIGhhcHB5IHRvIGdldCBuZXcgY29udHJpYnV0aW9ucy4KClNlZSBob3cgeW91IGNhbiBjb250cmlidXRlIHdpdGggb3VyIFtjb250cmlidXRpb24gZ3VpZGVdKC9DT05UUklCVVRJTkcubWQpLgo=\"")
	packr.PackJSONBytes("../../templates", "license-partials/AGPLv3", "\"\"")
	packr.PackJSONBytes("../../templates", "license-partials/ApacheV2", "\"\"")
	packr.PackJSONBytes("../../templates", "license-partials/BSD3", "\"QlNEIDMtQ2xhdXNlIExpY2Vuc2UKCkNvcHlyaWdodCAoYykge3sgLkNvcHlyaWdodC5ZZWFyIH19LCB7eyB3aXRoIC5Db3B5cmlnaHQuT3duZXIgfX17eyAuIH19e3sgZWxzZSB9fVRoZSB7eyAuUHJvamVjdC5OYW1lIH19IEF1dGhvcnN7eyBlbmQgfX0KQWxsIHJpZ2h0cyByZXNlcnZlZC4KClJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dAptb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDoKCjEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcwogICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci4KCjIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwKICAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbgogICBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi4KCjMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIGNvcHlyaWdodCBob2xkZXIgbm9yIHRoZSBuYW1lcyBvZiBpdHMKICAgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20KICAgdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi4KClRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgIkFTIElTIgpBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFCklNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRQpESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFCkZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMCkRBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SClNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSCkNBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksCk9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFCk9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0Uu\"")
	packr.PackJSONBytes("../../templates", "license-partials/GPLv3", "\"\"")
	packr.PackJSONBytes("../../templates", "license-partials/MIT", "\"TUlUIExpY2Vuc2UKCkNvcHlyaWdodCAoYykge3sgLkNvcHlyaWdodC5ZZWFyIH19IC0ge3sgd2l0aCAuQ29weXJpZ2h0Lk93bmVyIH19e3sgLiB9fXt7IGVsc2UgfX1UaGUge3sgLlByb2plY3QuTmFtZSB9fSBBdXRob3Jze3sgZW5kIH19CgpQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mCnRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsIGluCnRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8KdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMKb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvCnNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczoKClRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbApjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLgoKVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IKSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksCkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQpBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSCkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sCk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFClNPRlRXQVJFLgo=\"")
	packr.PackJSONBytes("../../templates", "license-partials/creativeCommons0", "\"\"")
	packr.PackJSONBytes("../../templates", "license-partials/creativeCommonsBy", "\"\"")
	packr.PackJSONBytes("../../templates", "license-partials/creativeCommonsByNc", "\"\"")
	packr.PackJSONBytes("../../templates", "license-partials/creativeCommonsByNcSa", "\"QXR0cmlidXRpb24tTm9uQ29tbWVyY2lhbC1TaGFyZUFsaWtlIDQuMCBJbnRlcm5hdGlvbmFsCgo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKQ3JlYXRpdmUgQ29tbW9ucyBDb3Jwb3JhdGlvbiAoIkNyZWF0aXZlIENvbW1vbnMiKSBpcyBub3QgYSBsYXcgZmlybSBhbmQKZG9lcyBub3QgcHJvdmlkZSBsZWdhbCBzZXJ2aWNlcyBvciBsZWdhbCBhZHZpY2UuIERpc3RyaWJ1dGlvbiBvZgpDcmVhdGl2ZSBDb21tb25zIHB1YmxpYyBsaWNlbnNlcyBkb2VzIG5vdCBjcmVhdGUgYSBsYXd5ZXItY2xpZW50IG9yCm90aGVyIHJlbGF0aW9uc2hpcC4gQ3JlYXRpdmUgQ29tbW9ucyBtYWtlcyBpdHMgbGljZW5zZXMgYW5kIHJlbGF0ZWQKaW5mb3JtYXRpb24gYXZhaWxhYmxlIG9uIGFuICJhcy1pcyIgYmFzaXMuIENyZWF0aXZlIENvbW1vbnMgZ2l2ZXMgbm8Kd2FycmFudGllcyByZWdhcmRpbmcgaXRzIGxpY2Vuc2VzLCBhbnkgbWF0ZXJpYWwgbGljZW5zZWQgdW5kZXIgdGhlaXIKdGVybXMgYW5kIGNvbmRpdGlvbnMsIG9yIGFueSByZWxhdGVkIGluZm9ybWF0aW9uLiBDcmVhdGl2ZSBDb21tb25zCmRpc2NsYWltcyBhbGwgbGlhYmlsaXR5IGZvciBkYW1hZ2VzIHJlc3VsdGluZyBmcm9tIHRoZWlyIHVzZSB0byB0aGUKZnVsbGVzdCBleHRlbnQgcG9zc2libGUuCgpVc2luZyBDcmVhdGl2ZSBDb21tb25zIFB1YmxpYyBMaWNlbnNlcwoKQ3JlYXRpdmUgQ29tbW9ucyBwdWJsaWMgbGljZW5zZXMgcHJvdmlkZSBhIHN0YW5kYXJkIHNldCBvZiB0ZXJtcyBhbmQKY29uZGl0aW9ucyB0aGF0IGNyZWF0b3JzIGFuZCBvdGhlciByaWdodHMgaG9sZGVycyBtYXkgdXNlIHRvIHNoYXJlCm9yaWdpbmFsIHdvcmtzIG9mIGF1dGhvcnNoaXAgYW5kIG90aGVyIG1hdGVyaWFsIHN1YmplY3QgdG8gY29weXJpZ2h0CmFuZCBjZXJ0YWluIG90aGVyIHJpZ2h0cyBzcGVjaWZpZWQgaW4gdGhlIHB1YmxpYyBsaWNlbnNlIGJlbG93LiBUaGUKZm9sbG93aW5nIGNvbnNpZGVyYXRpb25zIGFyZSBmb3IgaW5mb3JtYXRpb25hbCBwdXJwb3NlcyBvbmx5LCBhcmUgbm90CmV4aGF1c3RpdmUsIGFuZCBkbyBub3QgZm9ybSBwYXJ0IG9mIG91ciBsaWNlbnNlcy4KCiAgICAgQ29uc2lkZXJhdGlvbnMgZm9yIGxpY2Vuc29yczogT3VyIHB1YmxpYyBsaWNlbnNlcyBhcmUKICAgICBpbnRlbmRlZCBmb3IgdXNlIGJ5IHRob3NlIGF1dGhvcml6ZWQgdG8gZ2l2ZSB0aGUgcHVibGljCiAgICAgcGVybWlzc2lvbiB0byB1c2UgbWF0ZXJpYWwgaW4gd2F5cyBvdGhlcndpc2UgcmVzdHJpY3RlZCBieQogICAgIGNvcHlyaWdodCBhbmQgY2VydGFpbiBvdGhlciByaWdodHMuIE91ciBsaWNlbnNlcyBhcmUKICAgICBpcnJldm9jYWJsZS4gTGljZW5zb3JzIHNob3VsZCByZWFkIGFuZCB1bmRlcnN0YW5kIHRoZSB0ZXJtcwogICAgIGFuZCBjb25kaXRpb25zIG9mIHRoZSBsaWNlbnNlIHRoZXkgY2hvb3NlIGJlZm9yZSBhcHBseWluZyBpdC4KICAgICBMaWNlbnNvcnMgc2hvdWxkIGFsc28gc2VjdXJlIGFsbCByaWdodHMgbmVjZXNzYXJ5IGJlZm9yZQogICAgIGFwcGx5aW5nIG91ciBsaWNlbnNlcyBzbyB0aGF0IHRoZSBwdWJsaWMgY2FuIHJldXNlIHRoZQogICAgIG1hdGVyaWFsIGFzIGV4cGVjdGVkLiBMaWNlbnNvcnMgc2hvdWxkIGNsZWFybHkgbWFyayBhbnkKICAgICBtYXRlcmlhbCBub3Qgc3ViamVjdCB0byB0aGUgbGljZW5zZS4gVGhpcyBpbmNsdWRlcyBvdGhlciBDQy0KICAgICBsaWNlbnNlZCBtYXRlcmlhbCwgb3IgbWF0ZXJpYWwgdXNlZCB1bmRlciBhbiBleGNlcHRpb24gb3IKICAgICBsaW1pdGF0aW9uIHRvIGNvcHlyaWdodC4gTW9yZSBjb25zaWRlcmF0aW9ucyBmb3IgbGljZW5zb3JzOgoJd2lraS5jcmVhdGl2ZWNvbW1vbnMub3JnL0NvbnNpZGVyYXRpb25zX2Zvcl9saWNlbnNvcnMKCiAgICAgQ29uc2lkZXJhdGlvbnMgZm9yIHRoZSBwdWJsaWM6IEJ5IHVzaW5nIG9uZSBvZiBvdXIgcHVibGljCiAgICAgbGljZW5zZXMsIGEgbGljZW5zb3IgZ3JhbnRzIHRoZSBwdWJsaWMgcGVybWlzc2lvbiB0byB1c2UgdGhlCiAgICAgbGljZW5zZWQgbWF0ZXJpYWwgdW5kZXIgc3BlY2lmaWVkIHRlcm1zIGFuZCBjb25kaXRpb25zLiBJZgogICAgIHRoZSBsaWNlbnNvcidzIHBlcm1pc3Npb24gaXMgbm90IG5lY2Vzc2FyeSBmb3IgYW55IHJlYXNvbi0tZm9yCiAgICAgZXhhbXBsZSwgYmVjYXVzZSBvZiBhbnkgYXBwbGljYWJsZSBleGNlcHRpb24gb3IgbGltaXRhdGlvbiB0bwogICAgIGNvcHlyaWdodC0tdGhlbiB0aGF0IHVzZSBpcyBub3QgcmVndWxhdGVkIGJ5IHRoZSBsaWNlbnNlLiBPdXIKICAgICBsaWNlbnNlcyBncmFudCBvbmx5IHBlcm1pc3Npb25zIHVuZGVyIGNvcHlyaWdodCBhbmQgY2VydGFpbgogICAgIG90aGVyIHJpZ2h0cyB0aGF0IGEgbGljZW5zb3IgaGFzIGF1dGhvcml0eSB0byBncmFudC4gVXNlIG9mCiAgICAgdGhlIGxpY2Vuc2VkIG1hdGVyaWFsIG1heSBzdGlsbCBiZSByZXN0cmljdGVkIGZvciBvdGhlcgogICAgIHJlYXNvbnMsIGluY2x1ZGluZyBiZWNhdXNlIG90aGVycyBoYXZlIGNvcHlyaWdodCBvciBvdGhlcgogICAgIHJpZ2h0cyBpbiB0aGUgbWF0ZXJpYWwuIEEgbGljZW5zb3IgbWF5IG1ha2Ugc3BlY2lhbCByZXF1ZXN0cywKICAgICBzdWNoIGFzIGFza2luZyB0aGF0IGFsbCBjaGFuZ2VzIGJlIG1hcmtlZCBvciBkZXNjcmliZWQuCiAgICAgQWx0aG91Z2ggbm90IHJlcXVpcmVkIGJ5IG91ciBsaWNlbnNlcywgeW91IGFyZSBlbmNvdXJhZ2VkIHRvCiAgICAgcmVzcGVjdCB0aG9zZSByZXF1ZXN0cyB3aGVyZSByZWFzb25hYmxlLiBNb3JlX2NvbnNpZGVyYXRpb25zCiAgICAgZm9yIHRoZSBwdWJsaWM6IAoJd2lraS5jcmVhdGl2ZWNvbW1vbnMub3JnL0NvbnNpZGVyYXRpb25zX2Zvcl9saWNlbnNlZXMKCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgpDcmVhdGl2ZSBDb21tb25zIEF0dHJpYnV0aW9uLU5vbkNvbW1lcmNpYWwtU2hhcmVBbGlrZSA0LjAgSW50ZXJuYXRpb25hbApQdWJsaWMgTGljZW5zZQoKQnkgZXhlcmNpc2luZyB0aGUgTGljZW5zZWQgUmlnaHRzIChkZWZpbmVkIGJlbG93KSwgWW91IGFjY2VwdCBhbmQgYWdyZWUKdG8gYmUgYm91bmQgYnkgdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zIG9mIHRoaXMgQ3JlYXRpdmUgQ29tbW9ucwpBdHRyaWJ1dGlvbi1Ob25Db21tZXJjaWFsLVNoYXJlQWxpa2UgNC4wIEludGVybmF0aW9uYWwgUHVibGljIExpY2Vuc2UKKCJQdWJsaWMgTGljZW5zZSIpLiBUbyB0aGUgZXh0ZW50IHRoaXMgUHVibGljIExpY2Vuc2UgbWF5IGJlCmludGVycHJldGVkIGFzIGEgY29udHJhY3QsIFlvdSBhcmUgZ3JhbnRlZCB0aGUgTGljZW5zZWQgUmlnaHRzIGluCmNvbnNpZGVyYXRpb24gb2YgWW91ciBhY2NlcHRhbmNlIG9mIHRoZXNlIHRlcm1zIGFuZCBjb25kaXRpb25zLCBhbmQgdGhlCkxpY2Vuc29yIGdyYW50cyBZb3Ugc3VjaCByaWdodHMgaW4gY29uc2lkZXJhdGlvbiBvZiBiZW5lZml0cyB0aGUKTGljZW5zb3IgcmVjZWl2ZXMgZnJvbSBtYWtpbmcgdGhlIExpY2Vuc2VkIE1hdGVyaWFsIGF2YWlsYWJsZSB1bmRlcgp0aGVzZSB0ZXJtcyBhbmQgY29uZGl0aW9ucy4KCgpTZWN0aW9uIDEgLS0gRGVmaW5pdGlvbnMuCgogIGEuIEFkYXB0ZWQgTWF0ZXJpYWwgbWVhbnMgbWF0ZXJpYWwgc3ViamVjdCB0byBDb3B5cmlnaHQgYW5kIFNpbWlsYXIKICAgICBSaWdodHMgdGhhdCBpcyBkZXJpdmVkIGZyb20gb3IgYmFzZWQgdXBvbiB0aGUgTGljZW5zZWQgTWF0ZXJpYWwKICAgICBhbmQgaW4gd2hpY2ggdGhlIExpY2Vuc2VkIE1hdGVyaWFsIGlzIHRyYW5zbGF0ZWQsIGFsdGVyZWQsCiAgICAgYXJyYW5nZWQsIHRyYW5zZm9ybWVkLCBvciBvdGhlcndpc2UgbW9kaWZpZWQgaW4gYSBtYW5uZXIgcmVxdWlyaW5nCiAgICAgcGVybWlzc2lvbiB1bmRlciB0aGUgQ29weXJpZ2h0IGFuZCBTaW1pbGFyIFJpZ2h0cyBoZWxkIGJ5IHRoZQogICAgIExpY2Vuc29yLiBGb3IgcHVycG9zZXMgb2YgdGhpcyBQdWJsaWMgTGljZW5zZSwgd2hlcmUgdGhlIExpY2Vuc2VkCiAgICAgTWF0ZXJpYWwgaXMgYSBtdXNpY2FsIHdvcmssIHBlcmZvcm1hbmNlLCBvciBzb3VuZCByZWNvcmRpbmcsCiAgICAgQWRhcHRlZCBNYXRlcmlhbCBpcyBhbHdheXMgcHJvZHVjZWQgd2hlcmUgdGhlIExpY2Vuc2VkIE1hdGVyaWFsIGlzCiAgICAgc3luY2hlZCBpbiB0aW1lZCByZWxhdGlvbiB3aXRoIGEgbW92aW5nIGltYWdlLgoKICBiLiBBZGFwdGVyJ3MgTGljZW5zZSBtZWFucyB0aGUgbGljZW5zZSBZb3UgYXBwbHkgdG8gWW91ciBDb3B5cmlnaHQKICAgICBhbmQgU2ltaWxhciBSaWdodHMgaW4gWW91ciBjb250cmlidXRpb25zIHRvIEFkYXB0ZWQgTWF0ZXJpYWwgaW4KICAgICBhY2NvcmRhbmNlIHdpdGggdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zIG9mIHRoaXMgUHVibGljIExpY2Vuc2UuCgogIGMuIEJZLU5DLVNBIENvbXBhdGlibGUgTGljZW5zZSBtZWFucyBhIGxpY2Vuc2UgbGlzdGVkIGF0CiAgICAgY3JlYXRpdmVjb21tb25zLm9yZy9jb21wYXRpYmxlbGljZW5zZXMsIGFwcHJvdmVkIGJ5IENyZWF0aXZlCiAgICAgQ29tbW9ucyBhcyBlc3NlbnRpYWxseSB0aGUgZXF1aXZhbGVudCBvZiB0aGlzIFB1YmxpYyBMaWNlbnNlLgoKICBkLiBDb3B5cmlnaHQgYW5kIFNpbWlsYXIgUmlnaHRzIG1lYW5zIGNvcHlyaWdodCBhbmQvb3Igc2ltaWxhciByaWdodHMKICAgICBjbG9zZWx5IHJlbGF0ZWQgdG8gY29weXJpZ2h0IGluY2x1ZGluZywgd2l0aG91dCBsaW1pdGF0aW9uLAogICAgIHBlcmZvcm1hbmNlLCBicm9hZGNhc3QsIHNvdW5kIHJlY29yZGluZywgYW5kIFN1aSBHZW5lcmlzIERhdGFiYXNlCiAgICAgUmlnaHRzLCB3aXRob3V0IHJlZ2FyZCB0byBob3cgdGhlIHJpZ2h0cyBhcmUgbGFiZWxlZCBvcgogICAgIGNhdGVnb3JpemVkLiBGb3IgcHVycG9zZXMgb2YgdGhpcyBQdWJsaWMgTGljZW5zZSwgdGhlIHJpZ2h0cwogICAgIHNwZWNpZmllZCBpbiBTZWN0aW9uIDIoYikoMSktKDIpIGFyZSBub3QgQ29weXJpZ2h0IGFuZCBTaW1pbGFyCiAgICAgUmlnaHRzLgoKICBlLiBFZmZlY3RpdmUgVGVjaG5vbG9naWNhbCBNZWFzdXJlcyBtZWFucyB0aG9zZSBtZWFzdXJlcyB0aGF0LCBpbiB0aGUKICAgICBhYnNlbmNlIG9mIHByb3BlciBhdXRob3JpdHksIG1heSBub3QgYmUgY2lyY3VtdmVudGVkIHVuZGVyIGxhd3MKICAgICBmdWxmaWxsaW5nIG9ibGlnYXRpb25zIHVuZGVyIEFydGljbGUgMTEgb2YgdGhlIFdJUE8gQ29weXJpZ2h0CiAgICAgVHJlYXR5IGFkb3B0ZWQgb24gRGVjZW1iZXIgMjAsIDE5OTYsIGFuZC9vciBzaW1pbGFyIGludGVybmF0aW9uYWwKICAgICBhZ3JlZW1lbnRzLgoKICBmLiBFeGNlcHRpb25zIGFuZCBMaW1pdGF0aW9ucyBtZWFucyBmYWlyIHVzZSwgZmFpciBkZWFsaW5nLCBhbmQvb3IKICAgICBhbnkgb3RoZXIgZXhjZXB0aW9uIG9yIGxpbWl0YXRpb24gdG8gQ29weXJpZ2h0IGFuZCBTaW1pbGFyIFJpZ2h0cwogICAgIHRoYXQgYXBwbGllcyB0byBZb3VyIHVzZSBvZiB0aGUgTGljZW5zZWQgTWF0ZXJpYWwuCgogIGcuIExpY2Vuc2UgRWxlbWVudHMgbWVhbnMgdGhlIGxpY2Vuc2UgYXR0cmlidXRlcyBsaXN0ZWQgaW4gdGhlIG5hbWUKICAgICBvZiBhIENyZWF0aXZlIENvbW1vbnMgUHVibGljIExpY2Vuc2UuIFRoZSBMaWNlbnNlIEVsZW1lbnRzIG9mIHRoaXMKICAgICBQdWJsaWMgTGljZW5zZSBhcmUgQXR0cmlidXRpb24sIE5vbkNvbW1lcmNpYWwsIGFuZCBTaGFyZUFsaWtlLgoKICBoLiBMaWNlbnNlZCBNYXRlcmlhbCBtZWFucyB0aGUgYXJ0aXN0aWMgb3IgbGl0ZXJhcnkgd29yaywgZGF0YWJhc2UsCiAgICAgb3Igb3RoZXIgbWF0ZXJpYWwgdG8gd2hpY2ggdGhlIExpY2Vuc29yIGFwcGxpZWQgdGhpcyBQdWJsaWMKICAgICBMaWNlbnNlLgoKICBpLiBMaWNlbnNlZCBSaWdodHMgbWVhbnMgdGhlIHJpZ2h0cyBncmFudGVkIHRvIFlvdSBzdWJqZWN0IHRvIHRoZQogICAgIHRlcm1zIGFuZCBjb25kaXRpb25zIG9mIHRoaXMgUHVibGljIExpY2Vuc2UsIHdoaWNoIGFyZSBsaW1pdGVkIHRvCiAgICAgYWxsIENvcHlyaWdodCBhbmQgU2ltaWxhciBSaWdodHMgdGhhdCBhcHBseSB0byBZb3VyIHVzZSBvZiB0aGUKICAgICBMaWNlbnNlZCBNYXRlcmlhbCBhbmQgdGhhdCB0aGUgTGljZW5zb3IgaGFzIGF1dGhvcml0eSB0byBsaWNlbnNlLgoKICBqLiBMaWNlbnNvciBtZWFucyB0aGUgaW5kaXZpZHVhbChzKSBvciBlbnRpdHkoaWVzKSBncmFudGluZyByaWdodHMKICAgICB1bmRlciB0aGlzIFB1YmxpYyBMaWNlbnNlLgoKICBrLiBOb25Db21tZXJjaWFsIG1lYW5zIG5vdCBwcmltYXJpbHkgaW50ZW5kZWQgZm9yIG9yIGRpcmVjdGVkIHRvd2FyZHMKICAgICBjb21tZXJjaWFsIGFkdmFudGFnZSBvciBtb25ldGFyeSBjb21wZW5zYXRpb24uIEZvciBwdXJwb3NlcyBvZgogICAgIHRoaXMgUHVibGljIExpY2Vuc2UsIHRoZSBleGNoYW5nZSBvZiB0aGUgTGljZW5zZWQgTWF0ZXJpYWwgZm9yCiAgICAgb3RoZXIgbWF0ZXJpYWwgc3ViamVjdCB0byBDb3B5cmlnaHQgYW5kIFNpbWlsYXIgUmlnaHRzIGJ5IGRpZ2l0YWwKICAgICBmaWxlLXNoYXJpbmcgb3Igc2ltaWxhciBtZWFucyBpcyBOb25Db21tZXJjaWFsIHByb3ZpZGVkIHRoZXJlIGlzCiAgICAgbm8gcGF5bWVudCBvZiBtb25ldGFyeSBjb21wZW5zYXRpb24gaW4gY29ubmVjdGlvbiB3aXRoIHRoZQogICAgIGV4Y2hhbmdlLgoKICBsLiBTaGFyZSBtZWFucyB0byBwcm92aWRlIG1hdGVyaWFsIHRvIHRoZSBwdWJsaWMgYnkgYW55IG1lYW5zIG9yCiAgICAgcHJvY2VzcyB0aGF0IHJlcXVpcmVzIHBlcm1pc3Npb24gdW5kZXIgdGhlIExpY2Vuc2VkIFJpZ2h0cywgc3VjaAogICAgIGFzIHJlcHJvZHVjdGlvbiwgcHVibGljIGRpc3BsYXksIHB1YmxpYyBwZXJmb3JtYW5jZSwgZGlzdHJpYnV0aW9uLAogICAgIGRpc3NlbWluYXRpb24sIGNvbW11bmljYXRpb24sIG9yIGltcG9ydGF0aW9uLCBhbmQgdG8gbWFrZSBtYXRlcmlhbAogICAgIGF2YWlsYWJsZSB0byB0aGUgcHVibGljIGluY2x1ZGluZyBpbiB3YXlzIHRoYXQgbWVtYmVycyBvZiB0aGUKICAgICBwdWJsaWMgbWF5IGFjY2VzcyB0aGUgbWF0ZXJpYWwgZnJvbSBhIHBsYWNlIGFuZCBhdCBhIHRpbWUKICAgICBpbmRpdmlkdWFsbHkgY2hvc2VuIGJ5IHRoZW0uCgogIG0uIFN1aSBHZW5lcmlzIERhdGFiYXNlIFJpZ2h0cyBtZWFucyByaWdodHMgb3RoZXIgdGhhbiBjb3B5cmlnaHQKICAgICByZXN1bHRpbmcgZnJvbSBEaXJlY3RpdmUgOTYvOS9FQyBvZiB0aGUgRXVyb3BlYW4gUGFybGlhbWVudCBhbmQgb2YKICAgICB0aGUgQ291bmNpbCBvZiAxMSBNYXJjaCAxOTk2IG9uIHRoZSBsZWdhbCBwcm90ZWN0aW9uIG9mIGRhdGFiYXNlcywKICAgICBhcyBhbWVuZGVkIGFuZC9vciBzdWNjZWVkZWQsIGFzIHdlbGwgYXMgb3RoZXIgZXNzZW50aWFsbHkKICAgICBlcXVpdmFsZW50IHJpZ2h0cyBhbnl3aGVyZSBpbiB0aGUgd29ybGQuCgogIG4uIFlvdSBtZWFucyB0aGUgaW5kaXZpZHVhbCBvciBlbnRpdHkgZXhlcmNpc2luZyB0aGUgTGljZW5zZWQgUmlnaHRzCiAgICAgdW5kZXIgdGhpcyBQdWJsaWMgTGljZW5zZS4gWW91ciBoYXMgYSBjb3JyZXNwb25kaW5nIG1lYW5pbmcuCgoKU2VjdGlvbiAyIC0tIFNjb3BlLgoKICBhLiBMaWNlbnNlIGdyYW50LgoKICAgICAgIDEuIFN1YmplY3QgdG8gdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zIG9mIHRoaXMgUHVibGljIExpY2Vuc2UsCiAgICAgICAgICB0aGUgTGljZW5zb3IgaGVyZWJ5IGdyYW50cyBZb3UgYSB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwKICAgICAgICAgIG5vbi1zdWJsaWNlbnNhYmxlLCBub24tZXhjbHVzaXZlLCBpcnJldm9jYWJsZSBsaWNlbnNlIHRvCiAgICAgICAgICBleGVyY2lzZSB0aGUgTGljZW5zZWQgUmlnaHRzIGluIHRoZSBMaWNlbnNlZCBNYXRlcmlhbCB0bzoKCiAgICAgICAgICAgIGEuIHJlcHJvZHVjZSBhbmQgU2hhcmUgdGhlIExpY2Vuc2VkIE1hdGVyaWFsLCBpbiB3aG9sZSBvcgogICAgICAgICAgICAgICBpbiBwYXJ0LCBmb3IgTm9uQ29tbWVyY2lhbCBwdXJwb3NlcyBvbmx5OyBhbmQKCiAgICAgICAgICAgIGIuIHByb2R1Y2UsIHJlcHJvZHVjZSwgYW5kIFNoYXJlIEFkYXB0ZWQgTWF0ZXJpYWwgZm9yCiAgICAgICAgICAgICAgIE5vbkNvbW1lcmNpYWwgcHVycG9zZXMgb25seS4KCiAgICAgICAyLiBFeGNlcHRpb25zIGFuZCBMaW1pdGF0aW9ucy4gRm9yIHRoZSBhdm9pZGFuY2Ugb2YgZG91YnQsIHdoZXJlCiAgICAgICAgICBFeGNlcHRpb25zIGFuZCBMaW1pdGF0aW9ucyBhcHBseSB0byBZb3VyIHVzZSwgdGhpcyBQdWJsaWMKICAgICAgICAgIExpY2Vuc2UgZG9lcyBub3QgYXBwbHksIGFuZCBZb3UgZG8gbm90IG5lZWQgdG8gY29tcGx5IHdpdGgKICAgICAgICAgIGl0cyB0ZXJtcyBhbmQgY29uZGl0aW9ucy4KCiAgICAgICAzLiBUZXJtLiBUaGUgdGVybSBvZiB0aGlzIFB1YmxpYyBMaWNlbnNlIGlzIHNwZWNpZmllZCBpbiBTZWN0aW9uCiAgICAgICAgICA2KGEpLgoKICAgICAgIDQuIE1lZGlhIGFuZCBmb3JtYXRzOyB0ZWNobmljYWwgbW9kaWZpY2F0aW9ucyBhbGxvd2VkLiBUaGUKICAgICAgICAgIExpY2Vuc29yIGF1dGhvcml6ZXMgWW91IHRvIGV4ZXJjaXNlIHRoZSBMaWNlbnNlZCBSaWdodHMgaW4KICAgICAgICAgIGFsbCBtZWRpYSBhbmQgZm9ybWF0cyB3aGV0aGVyIG5vdyBrbm93biBvciBoZXJlYWZ0ZXIgY3JlYXRlZCwKICAgICAgICAgIGFuZCB0byBtYWtlIHRlY2huaWNhbCBtb2RpZmljYXRpb25zIG5lY2Vzc2FyeSB0byBkbyBzby4gVGhlCiAgICAgICAgICBMaWNlbnNvciB3YWl2ZXMgYW5kL29yIGFncmVlcyBub3QgdG8gYXNzZXJ0IGFueSByaWdodCBvcgogICAgICAgICAgYXV0aG9yaXR5IHRvIGZvcmJpZCBZb3UgZnJvbSBtYWtpbmcgdGVjaG5pY2FsIG1vZGlmaWNhdGlvbnMKICAgICAgICAgIG5lY2Vzc2FyeSB0byBleGVyY2lzZSB0aGUgTGljZW5zZWQgUmlnaHRzLCBpbmNsdWRpbmcKICAgICAgICAgIHRlY2huaWNhbCBtb2RpZmljYXRpb25zIG5lY2Vzc2FyeSB0byBjaXJjdW12ZW50IEVmZmVjdGl2ZQogICAgICAgICAgVGVjaG5vbG9naWNhbCBNZWFzdXJlcy4gRm9yIHB1cnBvc2VzIG9mIHRoaXMgUHVibGljIExpY2Vuc2UsCiAgICAgICAgICBzaW1wbHkgbWFraW5nIG1vZGlmaWNhdGlvbnMgYXV0aG9yaXplZCBieSB0aGlzIFNlY3Rpb24gMihhKQogICAgICAgICAgKDQpIG5ldmVyIHByb2R1Y2VzIEFkYXB0ZWQgTWF0ZXJpYWwuCgogICAgICAgNS4gRG93bnN0cmVhbSByZWNpcGllbnRzLgoKICAgICAgICAgICAgYS4gT2ZmZXIgZnJvbSB0aGUgTGljZW5zb3IgLS0gTGljZW5zZWQgTWF0ZXJpYWwuIEV2ZXJ5CiAgICAgICAgICAgICAgIHJlY2lwaWVudCBvZiB0aGUgTGljZW5zZWQgTWF0ZXJpYWwgYXV0b21hdGljYWxseQogICAgICAgICAgICAgICByZWNlaXZlcyBhbiBvZmZlciBmcm9tIHRoZSBMaWNlbnNvciB0byBleGVyY2lzZSB0aGUKICAgICAgICAgICAgICAgTGljZW5zZWQgUmlnaHRzIHVuZGVyIHRoZSB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB0aGlzCiAgICAgICAgICAgICAgIFB1YmxpYyBMaWNlbnNlLgoKICAgICAgICAgICAgYi4gQWRkaXRpb25hbCBvZmZlciBmcm9tIHRoZSBMaWNlbnNvciAtLSBBZGFwdGVkIE1hdGVyaWFsLgogICAgICAgICAgICAgICBFdmVyeSByZWNpcGllbnQgb2YgQWRhcHRlZCBNYXRlcmlhbCBmcm9tIFlvdQogICAgICAgICAgICAgICBhdXRvbWF0aWNhbGx5IHJlY2VpdmVzIGFuIG9mZmVyIGZyb20gdGhlIExpY2Vuc29yIHRvCiAgICAgICAgICAgICAgIGV4ZXJjaXNlIHRoZSBMaWNlbnNlZCBSaWdodHMgaW4gdGhlIEFkYXB0ZWQgTWF0ZXJpYWwKICAgICAgICAgICAgICAgdW5kZXIgdGhlIGNvbmRpdGlvbnMgb2YgdGhlIEFkYXB0ZXIncyBMaWNlbnNlIFlvdSBhcHBseS4KCiAgICAgICAgICAgIGMuIE5vIGRvd25zdHJlYW0gcmVzdHJpY3Rpb25zLiBZb3UgbWF5IG5vdCBvZmZlciBvciBpbXBvc2UKICAgICAgICAgICAgICAgYW55IGFkZGl0aW9uYWwgb3IgZGlmZmVyZW50IHRlcm1zIG9yIGNvbmRpdGlvbnMgb24sIG9yCiAgICAgICAgICAgICAgIGFwcGx5IGFueSBFZmZlY3RpdmUgVGVjaG5vbG9naWNhbCBNZWFzdXJlcyB0bywgdGhlCiAgICAgICAgICAgICAgIExpY2Vuc2VkIE1hdGVyaWFsIGlmIGRvaW5nIHNvIHJlc3RyaWN0cyBleGVyY2lzZSBvZiB0aGUKICAgICAgICAgICAgICAgTGljZW5zZWQgUmlnaHRzIGJ5IGFueSByZWNpcGllbnQgb2YgdGhlIExpY2Vuc2VkCiAgICAgICAgICAgICAgIE1hdGVyaWFsLgoKICAgICAgIDYuIE5vIGVuZG9yc2VtZW50LiBOb3RoaW5nIGluIHRoaXMgUHVibGljIExpY2Vuc2UgY29uc3RpdHV0ZXMgb3IKICAgICAgICAgIG1heSBiZSBjb25zdHJ1ZWQgYXMgcGVybWlzc2lvbiB0byBhc3NlcnQgb3IgaW1wbHkgdGhhdCBZb3UKICAgICAgICAgIGFyZSwgb3IgdGhhdCBZb3VyIHVzZSBvZiB0aGUgTGljZW5zZWQgTWF0ZXJpYWwgaXMsIGNvbm5lY3RlZAogICAgICAgICAgd2l0aCwgb3Igc3BvbnNvcmVkLCBlbmRvcnNlZCwgb3IgZ3JhbnRlZCBvZmZpY2lhbCBzdGF0dXMgYnksCiAgICAgICAgICB0aGUgTGljZW5zb3Igb3Igb3RoZXJzIGRlc2lnbmF0ZWQgdG8gcmVjZWl2ZSBhdHRyaWJ1dGlvbiBhcwogICAgICAgICAgcHJvdmlkZWQgaW4gU2VjdGlvbiAzKGEpKDEpKEEpKGkpLgoKICBiLiBPdGhlciByaWdodHMuCgogICAgICAgMS4gTW9yYWwgcmlnaHRzLCBzdWNoIGFzIHRoZSByaWdodCBvZiBpbnRlZ3JpdHksIGFyZSBub3QKICAgICAgICAgIGxpY2Vuc2VkIHVuZGVyIHRoaXMgUHVibGljIExpY2Vuc2UsIG5vciBhcmUgcHVibGljaXR5LAogICAgICAgICAgcHJpdmFjeSwgYW5kL29yIG90aGVyIHNpbWlsYXIgcGVyc29uYWxpdHkgcmlnaHRzOyBob3dldmVyLCB0bwogICAgICAgICAgdGhlIGV4dGVudCBwb3NzaWJsZSwgdGhlIExpY2Vuc29yIHdhaXZlcyBhbmQvb3IgYWdyZWVzIG5vdCB0bwogICAgICAgICAgYXNzZXJ0IGFueSBzdWNoIHJpZ2h0cyBoZWxkIGJ5IHRoZSBMaWNlbnNvciB0byB0aGUgbGltaXRlZAogICAgICAgICAgZXh0ZW50IG5lY2Vzc2FyeSB0byBhbGxvdyBZb3UgdG8gZXhlcmNpc2UgdGhlIExpY2Vuc2VkCiAgICAgICAgICBSaWdodHMsIGJ1dCBub3Qgb3RoZXJ3aXNlLgoKICAgICAgIDIuIFBhdGVudCBhbmQgdHJhZGVtYXJrIHJpZ2h0cyBhcmUgbm90IGxpY2Vuc2VkIHVuZGVyIHRoaXMKICAgICAgICAgIFB1YmxpYyBMaWNlbnNlLgoKICAgICAgIDMuIFRvIHRoZSBleHRlbnQgcG9zc2libGUsIHRoZSBMaWNlbnNvciB3YWl2ZXMgYW55IHJpZ2h0IHRvCiAgICAgICAgICBjb2xsZWN0IHJveWFsdGllcyBmcm9tIFlvdSBmb3IgdGhlIGV4ZXJjaXNlIG9mIHRoZSBMaWNlbnNlZAogICAgICAgICAgUmlnaHRzLCB3aGV0aGVyIGRpcmVjdGx5IG9yIHRocm91Z2ggYSBjb2xsZWN0aW5nIHNvY2lldHkKICAgICAgICAgIHVuZGVyIGFueSB2b2x1bnRhcnkgb3Igd2FpdmFibGUgc3RhdHV0b3J5IG9yIGNvbXB1bHNvcnkKICAgICAgICAgIGxpY2Vuc2luZyBzY2hlbWUuIEluIGFsbCBvdGhlciBjYXNlcyB0aGUgTGljZW5zb3IgZXhwcmVzc2x5CiAgICAgICAgICByZXNlcnZlcyBhbnkgcmlnaHQgdG8gY29sbGVjdCBzdWNoIHJveWFsdGllcywgaW5jbHVkaW5nIHdoZW4KICAgICAgICAgIHRoZSBMaWNlbnNlZCBNYXRlcmlhbCBpcyB1c2VkIG90aGVyIHRoYW4gZm9yIE5vbkNvbW1lcmNpYWwKICAgICAgICAgIHB1cnBvc2VzLgoKClNlY3Rpb24gMyAtLSBMaWNlbnNlIENvbmRpdGlvbnMuCgpZb3VyIGV4ZXJjaXNlIG9mIHRoZSBMaWNlbnNlZCBSaWdodHMgaXMgZXhwcmVzc2x5IG1hZGUgc3ViamVjdCB0byB0aGUKZm9sbG93aW5nIGNvbmRpdGlvbnMuCgogIGEuIEF0dHJpYnV0aW9uLgoKICAgICAgIDEuIElmIFlvdSBTaGFyZSB0aGUgTGljZW5zZWQgTWF0ZXJpYWwgKGluY2x1ZGluZyBpbiBtb2RpZmllZAogICAgICAgICAgZm9ybSksIFlvdSBtdXN0OgoKICAgICAgICAgICAgYS4gcmV0YWluIHRoZSBmb2xsb3dpbmcgaWYgaXQgaXMgc3VwcGxpZWQgYnkgdGhlIExpY2Vuc29yCiAgICAgICAgICAgICAgIHdpdGggdGhlIExpY2Vuc2VkIE1hdGVyaWFsOgoKICAgICAgICAgICAgICAgICBpLiBpZGVudGlmaWNhdGlvbiBvZiB0aGUgY3JlYXRvcihzKSBvZiB0aGUgTGljZW5zZWQKICAgICAgICAgICAgICAgICAgICBNYXRlcmlhbCBhbmQgYW55IG90aGVycyBkZXNpZ25hdGVkIHRvIHJlY2VpdmUKICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGlvbiwgaW4gYW55IHJlYXNvbmFibGUgbWFubmVyIHJlcXVlc3RlZCBieQogICAgICAgICAgICAgICAgICAgIHRoZSBMaWNlbnNvciAoaW5jbHVkaW5nIGJ5IHBzZXVkb255bSBpZgogICAgICAgICAgICAgICAgICAgIGRlc2lnbmF0ZWQpOwoKICAgICAgICAgICAgICAgIGlpLiBhIGNvcHlyaWdodCBub3RpY2U7CgogICAgICAgICAgICAgICBpaWkuIGEgbm90aWNlIHRoYXQgcmVmZXJzIHRvIHRoaXMgUHVibGljIExpY2Vuc2U7CgogICAgICAgICAgICAgICAgaXYuIGEgbm90aWNlIHRoYXQgcmVmZXJzIHRvIHRoZSBkaXNjbGFpbWVyIG9mCiAgICAgICAgICAgICAgICAgICAgd2FycmFudGllczsKCiAgICAgICAgICAgICAgICAgdi4gYSBVUkkgb3IgaHlwZXJsaW5rIHRvIHRoZSBMaWNlbnNlZCBNYXRlcmlhbCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBleHRlbnQgcmVhc29uYWJseSBwcmFjdGljYWJsZTsKCiAgICAgICAgICAgIGIuIGluZGljYXRlIGlmIFlvdSBtb2RpZmllZCB0aGUgTGljZW5zZWQgTWF0ZXJpYWwgYW5kCiAgICAgICAgICAgICAgIHJldGFpbiBhbiBpbmRpY2F0aW9uIG9mIGFueSBwcmV2aW91cyBtb2RpZmljYXRpb25zOyBhbmQKCiAgICAgICAgICAgIGMuIGluZGljYXRlIHRoZSBMaWNlbnNlZCBNYXRlcmlhbCBpcyBsaWNlbnNlZCB1bmRlciB0aGlzCiAgICAgICAgICAgICAgIFB1YmxpYyBMaWNlbnNlLCBhbmQgaW5jbHVkZSB0aGUgdGV4dCBvZiwgb3IgdGhlIFVSSSBvcgogICAgICAgICAgICAgICBoeXBlcmxpbmsgdG8sIHRoaXMgUHVibGljIExpY2Vuc2UuCgogICAgICAgMi4gWW91IG1heSBzYXRpc2Z5IHRoZSBjb25kaXRpb25zIGluIFNlY3Rpb24gMyhhKSgxKSBpbiBhbnkKICAgICAgICAgIHJlYXNvbmFibGUgbWFubmVyIGJhc2VkIG9uIHRoZSBtZWRpdW0sIG1lYW5zLCBhbmQgY29udGV4dCBpbgogICAgICAgICAgd2hpY2ggWW91IFNoYXJlIHRoZSBMaWNlbnNlZCBNYXRlcmlhbC4gRm9yIGV4YW1wbGUsIGl0IG1heSBiZQogICAgICAgICAgcmVhc29uYWJsZSB0byBzYXRpc2Z5IHRoZSBjb25kaXRpb25zIGJ5IHByb3ZpZGluZyBhIFVSSSBvcgogICAgICAgICAgaHlwZXJsaW5rIHRvIGEgcmVzb3VyY2UgdGhhdCBpbmNsdWRlcyB0aGUgcmVxdWlyZWQKICAgICAgICAgIGluZm9ybWF0aW9uLgogICAgICAgMy4gSWYgcmVxdWVzdGVkIGJ5IHRoZSBMaWNlbnNvciwgWW91IG11c3QgcmVtb3ZlIGFueSBvZiB0aGUKICAgICAgICAgIGluZm9ybWF0aW9uIHJlcXVpcmVkIGJ5IFNlY3Rpb24gMyhhKSgxKShBKSB0byB0aGUgZXh0ZW50CiAgICAgICAgICByZWFzb25hYmx5IHByYWN0aWNhYmxlLgoKICBiLiBTaGFyZUFsaWtlLgoKICAgICBJbiBhZGRpdGlvbiB0byB0aGUgY29uZGl0aW9ucyBpbiBTZWN0aW9uIDMoYSksIGlmIFlvdSBTaGFyZQogICAgIEFkYXB0ZWQgTWF0ZXJpYWwgWW91IHByb2R1Y2UsIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhbHNvIGFwcGx5LgoKICAgICAgIDEuIFRoZSBBZGFwdGVyJ3MgTGljZW5zZSBZb3UgYXBwbHkgbXVzdCBiZSBhIENyZWF0aXZlIENvbW1vbnMKICAgICAgICAgIGxpY2Vuc2Ugd2l0aCB0aGUgc2FtZSBMaWNlbnNlIEVsZW1lbnRzLCB0aGlzIHZlcnNpb24gb3IKICAgICAgICAgIGxhdGVyLCBvciBhIEJZLU5DLVNBIENvbXBhdGlibGUgTGljZW5zZS4KCiAgICAgICAyLiBZb3UgbXVzdCBpbmNsdWRlIHRoZSB0ZXh0IG9mLCBvciB0aGUgVVJJIG9yIGh5cGVybGluayB0bywgdGhlCiAgICAgICAgICBBZGFwdGVyJ3MgTGljZW5zZSBZb3UgYXBwbHkuIFlvdSBtYXkgc2F0aXNmeSB0aGlzIGNvbmRpdGlvbgogICAgICAgICAgaW4gYW55IHJlYXNvbmFibGUgbWFubmVyIGJhc2VkIG9uIHRoZSBtZWRpdW0sIG1lYW5zLCBhbmQKICAgICAgICAgIGNvbnRleHQgaW4gd2hpY2ggWW91IFNoYXJlIEFkYXB0ZWQgTWF0ZXJpYWwuCgogICAgICAgMy4gWW91IG1heSBub3Qgb2ZmZXIgb3IgaW1wb3NlIGFueSBhZGRpdGlvbmFsIG9yIGRpZmZlcmVudCB0ZXJtcwogICAgICAgICAgb3IgY29uZGl0aW9ucyBvbiwgb3IgYXBwbHkgYW55IEVmZmVjdGl2ZSBUZWNobm9sb2dpY2FsCiAgICAgICAgICBNZWFzdXJlcyB0bywgQWRhcHRlZCBNYXRlcmlhbCB0aGF0IHJlc3RyaWN0IGV4ZXJjaXNlIG9mIHRoZQogICAgICAgICAgcmlnaHRzIGdyYW50ZWQgdW5kZXIgdGhlIEFkYXB0ZXIncyBMaWNlbnNlIFlvdSBhcHBseS4KCgpTZWN0aW9uIDQgLS0gU3VpIEdlbmVyaXMgRGF0YWJhc2UgUmlnaHRzLgoKV2hlcmUgdGhlIExpY2Vuc2VkIFJpZ2h0cyBpbmNsdWRlIFN1aSBHZW5lcmlzIERhdGFiYXNlIFJpZ2h0cyB0aGF0CmFwcGx5IHRvIFlvdXIgdXNlIG9mIHRoZSBMaWNlbnNlZCBNYXRlcmlhbDoKCiAgYS4gZm9yIHRoZSBhdm9pZGFuY2Ugb2YgZG91YnQsIFNlY3Rpb24gMihhKSgxKSBncmFudHMgWW91IHRoZSByaWdodAogICAgIHRvIGV4dHJhY3QsIHJldXNlLCByZXByb2R1Y2UsIGFuZCBTaGFyZSBhbGwgb3IgYSBzdWJzdGFudGlhbAogICAgIHBvcnRpb24gb2YgdGhlIGNvbnRlbnRzIG9mIHRoZSBkYXRhYmFzZSBmb3IgTm9uQ29tbWVyY2lhbCBwdXJwb3NlcwogICAgIG9ubHk7CgogIGIuIGlmIFlvdSBpbmNsdWRlIGFsbCBvciBhIHN1YnN0YW50aWFsIHBvcnRpb24gb2YgdGhlIGRhdGFiYXNlCiAgICAgY29udGVudHMgaW4gYSBkYXRhYmFzZSBpbiB3aGljaCBZb3UgaGF2ZSBTdWkgR2VuZXJpcyBEYXRhYmFzZQogICAgIFJpZ2h0cywgdGhlbiB0aGUgZGF0YWJhc2UgaW4gd2hpY2ggWW91IGhhdmUgU3VpIEdlbmVyaXMgRGF0YWJhc2UKICAgICBSaWdodHMgKGJ1dCBub3QgaXRzIGluZGl2aWR1YWwgY29udGVudHMpIGlzIEFkYXB0ZWQgTWF0ZXJpYWwsCiAgICAgaW5jbHVkaW5nIGZvciBwdXJwb3NlcyBvZiBTZWN0aW9uIDMoYik7IGFuZAoKICBjLiBZb3UgbXVzdCBjb21wbHkgd2l0aCB0aGUgY29uZGl0aW9ucyBpbiBTZWN0aW9uIDMoYSkgaWYgWW91IFNoYXJlCiAgICAgYWxsIG9yIGEgc3Vic3RhbnRpYWwgcG9ydGlvbiBvZiB0aGUgY29udGVudHMgb2YgdGhlIGRhdGFiYXNlLgoKRm9yIHRoZSBhdm9pZGFuY2Ugb2YgZG91YnQsIHRoaXMgU2VjdGlvbiA0IHN1cHBsZW1lbnRzIGFuZCBkb2VzIG5vdApyZXBsYWNlIFlvdXIgb2JsaWdhdGlvbnMgdW5kZXIgdGhpcyBQdWJsaWMgTGljZW5zZSB3aGVyZSB0aGUgTGljZW5zZWQKUmlnaHRzIGluY2x1ZGUgb3RoZXIgQ29weXJpZ2h0IGFuZCBTaW1pbGFyIFJpZ2h0cy4KCgpTZWN0aW9uIDUgLS0gRGlzY2xhaW1lciBvZiBXYXJyYW50aWVzIGFuZCBMaW1pdGF0aW9uIG9mIExpYWJpbGl0eS4KCiAgYS4gVU5MRVNTIE9USEVSV0lTRSBTRVBBUkFURUxZIFVOREVSVEFLRU4gQlkgVEhFIExJQ0VOU09SLCBUTyBUSEUKICAgICBFWFRFTlQgUE9TU0lCTEUsIFRIRSBMSUNFTlNPUiBPRkZFUlMgVEhFIExJQ0VOU0VEIE1BVEVSSUFMIEFTLUlTCiAgICAgQU5EIEFTLUFWQUlMQUJMRSwgQU5EIE1BS0VTIE5PIFJFUFJFU0VOVEFUSU9OUyBPUiBXQVJSQU5USUVTIE9GCiAgICAgQU5ZIEtJTkQgQ09OQ0VSTklORyBUSEUgTElDRU5TRUQgTUFURVJJQUwsIFdIRVRIRVIgRVhQUkVTUywKICAgICBJTVBMSUVELCBTVEFUVVRPUlksIE9SIE9USEVSLiBUSElTIElOQ0xVREVTLCBXSVRIT1VUIExJTUlUQVRJT04sCiAgICAgV0FSUkFOVElFUyBPRiBUSVRMRSwgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIKICAgICBQVVJQT1NFLCBOT04tSU5GUklOR0VNRU5ULCBBQlNFTkNFIE9GIExBVEVOVCBPUiBPVEhFUiBERUZFQ1RTLAogICAgIEFDQ1VSQUNZLCBPUiBUSEUgUFJFU0VOQ0UgT1IgQUJTRU5DRSBPRiBFUlJPUlMsIFdIRVRIRVIgT1IgTk9UCiAgICAgS05PV04gT1IgRElTQ09WRVJBQkxFLiBXSEVSRSBESVNDTEFJTUVSUyBPRiBXQVJSQU5USUVTIEFSRSBOT1QKICAgICBBTExPV0VEIElOIEZVTEwgT1IgSU4gUEFSVCwgVEhJUyBESVNDTEFJTUVSIE1BWSBOT1QgQVBQTFkgVE8gWU9VLgoKICBiLiBUTyBUSEUgRVhURU5UIFBPU1NJQkxFLCBJTiBOTyBFVkVOVCBXSUxMIFRIRSBMSUNFTlNPUiBCRSBMSUFCTEUKICAgICBUTyBZT1UgT04gQU5ZIExFR0FMIFRIRU9SWSAoSU5DTFVESU5HLCBXSVRIT1VUIExJTUlUQVRJT04sCiAgICAgTkVHTElHRU5DRSkgT1IgT1RIRVJXSVNFIEZPUiBBTlkgRElSRUNULCBTUEVDSUFMLCBJTkRJUkVDVCwKICAgICBJTkNJREVOVEFMLCBDT05TRVFVRU5USUFMLCBQVU5JVElWRSwgRVhFTVBMQVJZLCBPUiBPVEhFUiBMT1NTRVMsCiAgICAgQ09TVFMsIEVYUEVOU0VTLCBPUiBEQU1BR0VTIEFSSVNJTkcgT1VUIE9GIFRISVMgUFVCTElDIExJQ0VOU0UgT1IKICAgICBVU0UgT0YgVEhFIExJQ0VOU0VEIE1BVEVSSUFMLCBFVkVOIElGIFRIRSBMSUNFTlNPUiBIQVMgQkVFTgogICAgIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggTE9TU0VTLCBDT1NUUywgRVhQRU5TRVMsIE9SCiAgICAgREFNQUdFUy4gV0hFUkUgQSBMSU1JVEFUSU9OIE9GIExJQUJJTElUWSBJUyBOT1QgQUxMT1dFRCBJTiBGVUxMIE9SCiAgICAgSU4gUEFSVCwgVEhJUyBMSU1JVEFUSU9OIE1BWSBOT1QgQVBQTFkgVE8gWU9VLgoKICBjLiBUaGUgZGlzY2xhaW1lciBvZiB3YXJyYW50aWVzIGFuZCBsaW1pdGF0aW9uIG9mIGxpYWJpbGl0eSBwcm92aWRlZAogICAgIGFib3ZlIHNoYWxsIGJlIGludGVycHJldGVkIGluIGEgbWFubmVyIHRoYXQsIHRvIHRoZSBleHRlbnQKICAgICBwb3NzaWJsZSwgbW9zdCBjbG9zZWx5IGFwcHJveGltYXRlcyBhbiBhYnNvbHV0ZSBkaXNjbGFpbWVyIGFuZAogICAgIHdhaXZlciBvZiBhbGwgbGlhYmlsaXR5LgoKClNlY3Rpb24gNiAtLSBUZXJtIGFuZCBUZXJtaW5hdGlvbi4KCiAgYS4gVGhpcyBQdWJsaWMgTGljZW5zZSBhcHBsaWVzIGZvciB0aGUgdGVybSBvZiB0aGUgQ29weXJpZ2h0IGFuZAogICAgIFNpbWlsYXIgUmlnaHRzIGxpY2Vuc2VkIGhlcmUuIEhvd2V2ZXIsIGlmIFlvdSBmYWlsIHRvIGNvbXBseSB3aXRoCiAgICAgdGhpcyBQdWJsaWMgTGljZW5zZSwgdGhlbiBZb3VyIHJpZ2h0cyB1bmRlciB0aGlzIFB1YmxpYyBMaWNlbnNlCiAgICAgdGVybWluYXRlIGF1dG9tYXRpY2FsbHkuCgogIGIuIFdoZXJlIFlvdXIgcmlnaHQgdG8gdXNlIHRoZSBMaWNlbnNlZCBNYXRlcmlhbCBoYXMgdGVybWluYXRlZCB1bmRlcgogICAgIFNlY3Rpb24gNihhKSwgaXQgcmVpbnN0YXRlczoKCiAgICAgICAxLiBhdXRvbWF0aWNhbGx5IGFzIG9mIHRoZSBkYXRlIHRoZSB2aW9sYXRpb24gaXMgY3VyZWQsIHByb3ZpZGVkCiAgICAgICAgICBpdCBpcyBjdXJlZCB3aXRoaW4gMzAgZGF5cyBvZiBZb3VyIGRpc2NvdmVyeSBvZiB0aGUKICAgICAgICAgIHZpb2xhdGlvbjsgb3IKCiAgICAgICAyLiB1cG9uIGV4cHJlc3MgcmVpbnN0YXRlbWVudCBieSB0aGUgTGljZW5zb3IuCgogICAgIEZvciB0aGUgYXZvaWRhbmNlIG9mIGRvdWJ0LCB0aGlzIFNlY3Rpb24gNihiKSBkb2VzIG5vdCBhZmZlY3QgYW55CiAgICAgcmlnaHQgdGhlIExpY2Vuc29yIG1heSBoYXZlIHRvIHNlZWsgcmVtZWRpZXMgZm9yIFlvdXIgdmlvbGF0aW9ucwogICAgIG9mIHRoaXMgUHVibGljIExpY2Vuc2UuCgogIGMuIEZvciB0aGUgYXZvaWRhbmNlIG9mIGRvdWJ0LCB0aGUgTGljZW5zb3IgbWF5IGFsc28gb2ZmZXIgdGhlCiAgICAgTGljZW5zZWQgTWF0ZXJpYWwgdW5kZXIgc2VwYXJhdGUgdGVybXMgb3IgY29uZGl0aW9ucyBvciBzdG9wCiAgICAgZGlzdHJpYnV0aW5nIHRoZSBMaWNlbnNlZCBNYXRlcmlhbCBhdCBhbnkgdGltZTsgaG93ZXZlciwgZG9pbmcgc28KICAgICB3aWxsIG5vdCB0ZXJtaW5hdGUgdGhpcyBQdWJsaWMgTGljZW5zZS4KCiAgZC4gU2VjdGlvbnMgMSwgNSwgNiwgNywgYW5kIDggc3Vydml2ZSB0ZXJtaW5hdGlvbiBvZiB0aGlzIFB1YmxpYwogICAgIExpY2Vuc2UuCgoKU2VjdGlvbiA3IC0tIE90aGVyIFRlcm1zIGFuZCBDb25kaXRpb25zLgoKICBhLiBUaGUgTGljZW5zb3Igc2hhbGwgbm90IGJlIGJvdW5kIGJ5IGFueSBhZGRpdGlvbmFsIG9yIGRpZmZlcmVudAogICAgIHRlcm1zIG9yIGNvbmRpdGlvbnMgY29tbXVuaWNhdGVkIGJ5IFlvdSB1bmxlc3MgZXhwcmVzc2x5IGFncmVlZC4KCiAgYi4gQW55IGFycmFuZ2VtZW50cywgdW5kZXJzdGFuZGluZ3MsIG9yIGFncmVlbWVudHMgcmVnYXJkaW5nIHRoZQogICAgIExpY2Vuc2VkIE1hdGVyaWFsIG5vdCBzdGF0ZWQgaGVyZWluIGFyZSBzZXBhcmF0ZSBmcm9tIGFuZAogICAgIGluZGVwZW5kZW50IG9mIHRoZSB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB0aGlzIFB1YmxpYyBMaWNlbnNlLgoKClNlY3Rpb24gOCAtLSBJbnRlcnByZXRhdGlvbi4KCiAgYS4gRm9yIHRoZSBhdm9pZGFuY2Ugb2YgZG91YnQsIHRoaXMgUHVibGljIExpY2Vuc2UgZG9lcyBub3QsIGFuZAogICAgIHNoYWxsIG5vdCBiZSBpbnRlcnByZXRlZCB0bywgcmVkdWNlLCBsaW1pdCwgcmVzdHJpY3QsIG9yIGltcG9zZQogICAgIGNvbmRpdGlvbnMgb24gYW55IHVzZSBvZiB0aGUgTGljZW5zZWQgTWF0ZXJpYWwgdGhhdCBjb3VsZCBsYXdmdWxseQogICAgIGJlIG1hZGUgd2l0aG91dCBwZXJtaXNzaW9uIHVuZGVyIHRoaXMgUHVibGljIExpY2Vuc2UuCgogIGIuIFRvIHRoZSBleHRlbnQgcG9zc2libGUsIGlmIGFueSBwcm92aXNpb24gb2YgdGhpcyBQdWJsaWMgTGljZW5zZSBpcwogICAgIGRlZW1lZCB1bmVuZm9yY2VhYmxlLCBpdCBzaGFsbCBiZSBhdXRvbWF0aWNhbGx5IHJlZm9ybWVkIHRvIHRoZQogICAgIG1pbmltdW0gZXh0ZW50IG5lY2Vzc2FyeSB0byBtYWtlIGl0IGVuZm9yY2VhYmxlLiBJZiB0aGUgcHJvdmlzaW9uCiAgICAgY2Fubm90IGJlIHJlZm9ybWVkLCBpdCBzaGFsbCBiZSBzZXZlcmVkIGZyb20gdGhpcyBQdWJsaWMgTGljZW5zZQogICAgIHdpdGhvdXQgYWZmZWN0aW5nIHRoZSBlbmZvcmNlYWJpbGl0eSBvZiB0aGUgcmVtYWluaW5nIHRlcm1zIGFuZAogICAgIGNvbmRpdGlvbnMuCgogIGMuIE5vIHRlcm0gb3IgY29uZGl0aW9uIG9mIHRoaXMgUHVibGljIExpY2Vuc2Ugd2lsbCBiZSB3YWl2ZWQgYW5kIG5vCiAgICAgZmFpbHVyZSB0byBjb21wbHkgY29uc2VudGVkIHRvIHVubGVzcyBleHByZXNzbHkgYWdyZWVkIHRvIGJ5IHRoZQogICAgIExpY2Vuc29yLgoKICBkLiBOb3RoaW5nIGluIHRoaXMgUHVibGljIExpY2Vuc2UgY29uc3RpdHV0ZXMgb3IgbWF5IGJlIGludGVycHJldGVkCiAgICAgYXMgYSBsaW1pdGF0aW9uIHVwb24sIG9yIHdhaXZlciBvZiwgYW55IHByaXZpbGVnZXMgYW5kIGltbXVuaXRpZXMKICAgICB0aGF0IGFwcGx5IHRvIHRoZSBMaWNlbnNvciBvciBZb3UsIGluY2x1ZGluZyBmcm9tIHRoZSBsZWdhbAogICAgIHByb2Nlc3NlcyBvZiBhbnkganVyaXNkaWN0aW9uIG9yIGF1dGhvcml0eS4KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgpDcmVhdGl2ZSBDb21tb25zIGlzIG5vdCBhIHBhcnR5IHRvIGl0cyBwdWJsaWMKbGljZW5zZXMuIE5vdHdpdGhzdGFuZGluZywgQ3JlYXRpdmUgQ29tbW9ucyBtYXkgZWxlY3QgdG8gYXBwbHkgb25lIG9mCml0cyBwdWJsaWMgbGljZW5zZXMgdG8gbWF0ZXJpYWwgaXQgcHVibGlzaGVzIGFuZCBpbiB0aG9zZSBpbnN0YW5jZXMKd2lsbCBiZSBjb25zaWRlcmVkIHRoZSDigJxMaWNlbnNvci7igJ0gVGhlIHRleHQgb2YgdGhlIENyZWF0aXZlIENvbW1vbnMKcHVibGljIGxpY2Vuc2VzIGlzIGRlZGljYXRlZCB0byB0aGUgcHVibGljIGRvbWFpbiB1bmRlciB0aGUgQ0MwIFB1YmxpYwpEb21haW4gRGVkaWNhdGlvbi4gRXhjZXB0IGZvciB0aGUgbGltaXRlZCBwdXJwb3NlIG9mIGluZGljYXRpbmcgdGhhdAptYXRlcmlhbCBpcyBzaGFyZWQgdW5kZXIgYSBDcmVhdGl2ZSBDb21tb25zIHB1YmxpYyBsaWNlbnNlIG9yIGFzCm90aGVyd2lzZSBwZXJtaXR0ZWQgYnkgdGhlIENyZWF0aXZlIENvbW1vbnMgcG9saWNpZXMgcHVibGlzaGVkIGF0CmNyZWF0aXZlY29tbW9ucy5vcmcvcG9saWNpZXMsIENyZWF0aXZlIENvbW1vbnMgZG9lcyBub3QgYXV0aG9yaXplIHRoZQp1c2Ugb2YgdGhlIHRyYWRlbWFyayAiQ3JlYXRpdmUgQ29tbW9ucyIgb3IgYW55IG90aGVyIHRyYWRlbWFyayBvciBsb2dvCm9mIENyZWF0aXZlIENvbW1vbnMgd2l0aG91dCBpdHMgcHJpb3Igd3JpdHRlbiBjb25zZW50IGluY2x1ZGluZywKd2l0aG91dCBsaW1pdGF0aW9uLCBpbiBjb25uZWN0aW9uIHdpdGggYW55IHVuYXV0aG9yaXplZCBtb2RpZmljYXRpb25zCnRvIGFueSBvZiBpdHMgcHVibGljIGxpY2Vuc2VzIG9yIGFueSBvdGhlciBhcnJhbmdlbWVudHMsCnVuZGVyc3RhbmRpbmdzLCBvciBhZ3JlZW1lbnRzIGNvbmNlcm5pbmcgdXNlIG9mIGxpY2Vuc2VkIG1hdGVyaWFsLiBGb3IKdGhlIGF2b2lkYW5jZSBvZiBkb3VidCwgdGhpcyBwYXJhZ3JhcGggZG9lcyBub3QgZm9ybSBwYXJ0IG9mIHRoZQpwdWJsaWMgbGljZW5zZXMuCgpDcmVhdGl2ZSBDb21tb25zIG1heSBiZSBjb250YWN0ZWQgYXQgY3JlYXRpdmVjb21tb25zLm9yZy4K\"")
	packr.PackJSONBytes("../../templates", "license-partials/creativeCommonsBySa", "\"\"")
	packr.PackJSONBytes("../../templates", "maintainer-examples/code-copyright-header", "\"e3stIGlmIGVxIC5Qcm9qZWN0Lk1haW5MaWNlbnNlICJBR1BMdjMiIC19fQovKgpDb3B5cmlnaHQgKEMpIHt7IC5Db3B5cmlnaHQuWWVhciB9fSAtIHt7IHdpdGggLkNvcHlyaWdodC5Pd25lciB9fXt7IC4gfX17eyBlbHNlIH19VGhlIHt7IC5Qcm9qZWN0Lk5hbWUgfX0gQXV0aG9yc3t7IGVuZCB9fQoKVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkKaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5CnRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yCihhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgpUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwKYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YKTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQpHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCllvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZQphbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS4gIElmIG5vdCwgc2VlIDxodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uCiovCnt7LSBlbHNlIGlmIGVxIC5Qcm9qZWN0Lk1haW5MaWNlbnNlICJHUEx2MyIgLX19Ci8qCkNvcHlyaWdodCAoQykge3sgLkNvcHlyaWdodC5ZZWFyIH19IC0ge3sgd2l0aCAuQ29weXJpZ2h0Lk93bmVyIH19e3sgLiB9fXt7IGVsc2UgfX1UaGUge3sgLlByb2plY3QuTmFtZSB9fSBBdXRob3Jze3sgZW5kIH19CgpUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeQppdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQp0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvcgooYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLgoKVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCmJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mCk1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUKR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCllvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlCmFsb25nIHdpdGggdGhpcyBwcm9ncmFtLiAgSWYgbm90LCBzZWUgPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi4KKi8Ke3stIGVsc2UgaWYgZXEgLlByb2plY3QuTWFpbkxpY2Vuc2UgIkJTRDMiIC19fQovKgpDb3B5cmlnaHQgKGMpIHt7IC5Db3B5cmlnaHQuWWVhciB9fSwge3sgd2l0aCAuQ29weXJpZ2h0Lk93bmVyIH19e3sgLiB9fXt7IGVsc2UgfX1UaGUge3sgLlByb2plY3QuTmFtZSB9fSBBdXRob3Jze3sgZW5kIH19CkFsbCByaWdodHMgcmVzZXJ2ZWQuCgpSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQKbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6CgoxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMKICAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuCgoyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsCiAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24KICAgYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uCgozLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBjb3B5cmlnaHQgaG9sZGVyIG5vciB0aGUgbmFtZXMgb2YgaXRzCiAgIGNvbnRyaWJ1dG9ycyBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tCiAgIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uCgpUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTICJBUyBJUyIKQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRQpJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUKRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRQpGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTApEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUgpTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUgpDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLApPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRQpPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLgoqLwp7ey0gZWxzZSBpZiBlcSAuUHJvamVjdC5NYWluTGljZW5zZSAiTUlUIiAtfX0KLyoKTUlUIExpY2Vuc2UKCkNvcHlyaWdodCAoYykge3sgLkNvcHlyaWdodC5ZZWFyIH19IC0ge3sgd2l0aCAuQ29weXJpZ2h0Lk93bmVyIH19e3sgLiB9fXt7IGVsc2UgfX1UaGUge3sgLlByb2plY3QuTmFtZSB9fSBBdXRob3Jze3sgZW5kIH19CgpQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mCnRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsIGluCnRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8KdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMKb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvCnNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczoKClRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbApjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLgoKVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IKSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksCkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQpBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSCkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sCk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFClNPRlRXQVJFLgoqLwp7ey0gZWxzZSAtfX0KLyoKe3sgaWYgLkNvcHlyaWdodC5Pd25lciAtfX0KICB7eyBwcmludGYgIkNvcHlyaWdodCAlcyAtICVzIiAuQ29weXJpZ2h0LlllYXIgLkNvcHlyaWdodC5Pd25lciB9fQp7ey0gZWxzZSAtfX0KICB7eyBwcmludGYgIkNvcHlyaWdodCAlcyAtICVzIiAuQ29weXJpZ2h0LlllYXIgKHByaW50ZiAiVGhlICVzIEF1dGhvcnMiIC5Qcm9qZWN0Lk5hbWUpIH19Cnt7IGVuZCB9fQpMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgpZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMApVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgpTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgoqLwp7ey0gZW5kIH19Cg==\"")
	packr.PackJSONBytes("../../templates", "maintainer-examples/docs-copyright-header", "\"LyoKe3sgaWYgLkNvcHlyaWdodC5Pd25lciAtfX0KICB7eyBwcmludGYgIkNvcHlyaWdodCAlcyAtICVzIiAuQ29weXJpZ2h0LlllYXIgLkNvcHlyaWdodC5Pd25lciB9fQp7ey0gZWxzZSAtfX0KICB7eyBwcmludGYgIkNvcHlyaWdodCAlcyAtICVzIiAuQ29weXJpZ2h0LlllYXIgKHByaW50ZiAiVGhlICVzIEF1dGhvcnMiIC5Qcm9qZWN0Lk5hbWUpIH19Cnt7IGVuZCB9fQpUaGlzIHdvcmsgaXMgbGljZW5zZWQgdW5kZXIgYSBDcmVhdGl2ZSBDb21tb25zIEF0dHJpYnV0aW9uLVNoYXJlQWxpa2UgNC4wIEludGVybmF0aW9uYWwgTGljZW5zZTsKeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgpZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKICAgIGh0dHBzOi8vY3JlYXRpdmVjb21tb25zLm9yZy9saWNlbnNlcy9ieS1zYS80LjAvbGVnYWxjb2RlClVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgZG9jdW1lbnRhdGlvbgpkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLApXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZApsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KKi8K\"")
	packr.PackJSONBytes("../../templates", "seed-config.example.yaml", "\"cHJvamVjdDoKICBuYW1lOiAiRXhhbXBsZSBQcm9qZWN0IiAjIHJlcXVpcmVkCiAgc3RhdGU6ICJ1bnN0YWJsZSIgIyB1bnN0YWJsZSwgYmV0YSwgc3RhYmxlIGFyZSBzdXBwb3J0ZWQKICBpbWFnZTogIi9ibG9iL21hc3Rlci9sb2dvLnN2ZyIKICB3ZWJzaXRlOiAiZXhhbXBsZS5jb20iCiAgb25lTGluZXI6ICJDcmVhdGluZyBhd2Vzb21lIHRoaW5ncywgd2hpbGUgZW5qb3lpbmcgbGl2ZS4iCiAgZGVzY3JpcHRpb246IHwKICAgIEZyZWUgc29mdHdhcmUgZGV2ZWxvcGVycyBndWFyYW50ZWUgZXZlcnlvbmUgZXF1YWwgcmlnaHRzIHRvIHRoZWlyIHByb2dyYW1zOwogICAgYW55IHVzZXIgY2FuIHN0dWR5IHRoZSBzb3VyY2UgY29kZSwgbW9kaWZ5IGl0LCBhbmQgc2hhcmUgdGhlIHByb2dyYW0uCiAgICBCeSBjb250cmFzdCwgbW9zdCBzb2Z0d2FyZSBjYXJyaWVzIGZpbmUgcHJpbnQgdGhhdCBkZW5pZXMgdXNlcnMgdGhlc2UgYmFzaWMgcmlnaHRzLCBsZWF2aW5nIHRoZW0gc3VzY2VwdGlibGUgdG8gdGhlIHdoaW1zIG9mIGl0cyBvd25lcnMuCiAgIyByZXF1aXJlZAogIHZlcnNpb246ICJ2MC4wLjAiCiAgbWFpbkxpY2Vuc2U6ICJhcGFjaGUyIiAjIGRlZmF1bHQ6IGFwYWNoZTIKICAgICMgQ3JlYXRpdmUgQ29tbW9uczogQ0NCeSBDQ1NhIENDQnlTYSBDQ0J5TmNTYSBDQzAKICAgICMgR1BMOiBHUEx2MyBBR1BMdjMKICAgICMgT3RoZXI6IEFwYWNoZTIgTUlUCiAgZG9jc0xpY2Vuc2U6ICJDQ0J5U2EiICMgZGVmYXVsdDogQ0NCeVNhCiAgICAjIENyZWF0aXZlIENvbW1vbnM6IENDQnkgQ0NTYSBDQ0J5U2EgQ0NCeU5jU2EgQ0MwCgp2aXNpb246CiAgdHlwZTogInBlcnNvbmFsIiAjIHBlcnNvbmFsIGlzIHRoZSBkZWZhdWx0LgogIG92ZXJ2aWV3OiB8CiAgICBUaGlzIHByb2plY3QgdGhyaXZlcyB0byBiZSBvcGVuLCB0cmFuc3BhcmVudCBhbmQgaGVscGZ1bC4KICAjIHJlcXVpcmVkCiAgaXRlbXM6CiAgICAtICJPbmx5IHNwZWNpZmljIGNhdGVnb3JpZXMgYWxsb3dlZCIKICAgIC0gIkJ1Z2ZpeGVzIG9ubHkiCiAgICAtICJGb3IgcGVyc29uYWwgcHJvamVjdHMgb25seSIKICBjb25jZXB0OiAiRXhhbXBsZSBQcm9qZWN0J3MgY29yZSBjb25jZXB0IHRvIHNob3djYXNlIGhvdywgd2h5IGl0IGRvZXMgd2hhdCBpdCBkb2VzLiIKICBhaW06ICJFeGFtcGxlIFByb2plY3Qgc2hvdWxkIG9ubHkgcHJvdmlkZSBhIHNtYWxsIGNvcmUgYW5kIGZ1cnRoZXIgYWRkaXRpb25zIHNob3VsZCBiZSBkb25lIGluIGhlbHBlciBwcm9qZWN0cy9wbHVnaW5zIG9yIHNvbWUgc29ydC4iCgpzdXBwb3J0UGxhdGZvcm1zOgogIC0gc2VydmljZTogIkNoYXQiCiAgICBsaW5rOiAiY2hhdC5leGFtcGxlLmNvbSIKICAtIHNlcnZpY2U6ICJVc2VyIE1haWxpbmdsaXN0IgogICAgbGluazogImxpc3QuZXhhbXBsZS5jb20iCiAgLSBzZXJ2aWNlOiAiRm9ydW0iCiAgICBsaW5rOiAiZm9ydW0uZXhhbXBsZS5jb20iCgpzdXBwb3J0TGlua3M6CiAgZG9jdW1lbnRhdGlvbjogIi9kb2NzIiAjIHJlY29tbWVuZGVkCiAgZXhhbXBsZXM6ICIvZXhhbXBsZXMiCiAgdHJvdWJsZXNob290aW5nOiAiL2RvY3MvdHJvdWJsZXNob290aW5nLm1kIiAjIHJlY29tbWVuZGVkCgpyZWFkbWU6CiAgdXNhZ2VFeGFtcGxlOiB8CiAgICBTb21lIGV4YW1wbGUgYGBgZ28gcnVuIGNsaWBgYAogICMgcmVjb21tZW5kZWQKCmNvbnRyaWJ1dGlvbkxpbmtzOgogIGlzc3VlVGVtcGxhdGU6ICIvLmdpdGh1Yi9JU1NVRV9URU1QTEFURS5tZCIKICBzdGFydGVySXNzdWVzOiAiaHR0cHM6Ly9naXRodWIuY29tL2RlYXItZ2l0aHViL2RlYXItZ2l0aHViL2xhYmVscy9zdGFydGVyJTIwaXNzdWUiICMgcmVwbGFjZSBkZWFyLWdpdGh1YiB3aXRoIHlvdXIgYWN0dWFsIHVybAoKZW1haWxzOgogIGNvbW1lcmNpYWxTdXBwb3J0OiAicGF5ZWQtc3VwcG9ydEBleGFtcGxlLmNvbSIKICBzZWN1cml0eTogInNlY3VyaXR5QGV4YW1wbGUuY29tIiAjIHJlcXVpcmVkCiAgY29jOiAiY29jQGV4YW1wbGUuY29tIiAjIHJlcXVpcmVkCgpjb3B5cmlnaHQ6CiAgb3duZXI6ICJUaGUgRXhhbXBsZSBQcm9qZWN0IGF1dGhvcnMiICMgZGVmYXVsdCBpcyBwcm9qZWN0Lm5hbWUKICB5ZWFyOiAiMjAxNyIgIyByZXF1aXJlZAoKY2xhOgogIGNvcHlyaWdodEhvbGRlcjogIlRpbnkgR29waGVyIiAjIHJlcXVpcmVkCiAgbWFpbDogImxlZ2FsQGV4YW1wbGUuY29tIiAjcmVxdWlyZWQKCm1haW50YWluZXJzOgogIC0gbmFtZTogIkh1Z2UgR29waGVyIgogICAgbmljazogImh1Z2VHb3BoZXIiCiAgLSBuYW1lOiAiVGlueSBHb3BoZXIiCiAgICBuaWNrOiAidGlueUdvcGhlciIKCnJlcG86CiAgbGluazogImh0dHBzOi8vZ2l0aHViLmNvbS9kZWFyLWdpdGh1Yi9kZWFyLWdpdGh1Yi8iICMgcmVxdWlyZWQKICB0eXBlOiAiR2l0aHViIiAjIHJlcXVpcmVkCgpiYWRnZXM6CiAgLSBpbWFnZTogImh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2Uvc3RhdGUtdW5zdGFibGUtYmx1ZS5zdmciCiAgICBhbHQ6ICJzdGF0ZSIKICAtIGltYWdlOiAiaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9naXRodWIvcmVsZWFzZS9kZWFyLWdpdGh1Yi9kZWFyLWdpdGh1Yi5zdmciCiAgICBsaW5rOiAiaHR0cHM6Ly9naXRodWIuY29tL2RlYXItZ2l0aHViL2RlYXItZ2l0aHViL3JlbGVhc2VzIgogICAgYWx0OiAicmVsZWFzZSIKICAtIGltYWdlOiAiaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9naXRodWIvbGljZW5zZS9kZWFyLWdpdGh1Yi9kZWFyLWdpdGh1Yi5zdmciCiAgICBsaW5rOiAiTElDRU5TRSIKICAgIGFsdDogImxpY2Vuc2UiCgpyZXBvc2VlZDoKICBjb25maWdWZXJzaW9uOiAidjEi\"")
	packr.PackJSONBytes("../../templates", "website/README.md", "\"IyBXZWJzaXRlCgpUYWtlIGEgbG9vayBhdCBbU3luYV0oaHR0cHM6Ly9zeW5hLm9ra3VyLm9yZykgZm9yIGEgZ3JlYXQgYW5kIGZsZXhpYmxlIHRoZW1lIHRvIGdldCB5b3VyIHdlYnNpdGUgc3RhcnRlZC4KU3luYSBpcyBhIG1vZHVsYXIgd2Vic2l0ZSB0aGVtZSBmb3IgdGhlIHN0YXRpYyBzaXRlIGdlbmVyYXRvciBIdWdvLCB3aGljaCBpcyBmYXN0IGFuZCBlbmFibGVzIHlvdSB0byBnZXQgdXAgYW5kIHJ1bm5pbmcgZmFzdC4K\"")
}
